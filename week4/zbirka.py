#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr  3 21:58:02 2025

@author: alex
"""

def ispisati(x):
    print("#===================================================================")
    print("#Zadatak ", x)
    
    
    print("#===================================================================")
    
#===================================================================


#===================================================================
#Zadatak  1
# Задатак: Агрегатно стање
# Написати програм којим се на основу температуре воде одређује њено агрегатно стање. Ако је температура:
# • виша од 0
# ◦ C и нижа од 100◦ C - агрегатно стање је течно
# • не виша од 0
# ◦ C - агрегатно стање је чврсто,
# • не нижа од 100◦ C - агрегатно стање је гасовито.
# За температуру од тачно 0
# ◦
# сматра се да је агрегатно стање чврсто, а за тачно 100◦ да је гасовито.
# Улаз: Температура - цео број од −100 до 200.
# Излаз: На стандардни излаз исписати једну од следећих речи: cvrsto, tecno, gasovito.
# Пример 1
# Улаз
# -10
# Излаз
# cvrsto
# Пример 2
# Улаз
# 99
# Излаз
# tecno


# temperatura=int(input("kolika je temperatura sada: "))
# if temperatura<100 and temperatura>0:
#     print('tecno')
# elif temperatura<=0:
#     print('cvrsto')
# else:
#     print('gasovito')
#===================================================================




#===================================================================
#Zadatak  2
# Задатак: Успех ученика
# Написати програм којим се на основу датог просека ученика приказује успех ученика. Одличан успех има
# ученик чији је просек већи или једнак 4,5. Врлодобaр успех постиже ученик чији је просек већи или једнак
# 3,5, а мањи од 4,5, добар успех се постиже за просек који је већи или једнак 2,5 а мањи од 3,5, довољан успех
# за просек већи или једнак 2, а мањи од 2,5. Ако ученик има неку јединицу унеће се просек 1, а успех му је
# недовољан.
# Улаз: Са стандардног улаза учитава се један реалан број из скупа [2, 5]∪{1} који представља просек ученика.
# Излаз: На стандардни излаз приказати успех ученика (реч odlican, vrlodobar, dobar, dovoljan или nedovoljan).
# Пример
# Улаз
# 3.75
# Излаз
# vrlodobar

# prosek=float(input('kakav si bio u osnovnoj '))
# if prosek>=4.5:
#     print('odlican bravo bre sine isti si kao aleksa the nikodijevic')
# elif 3.5<=prosek:
#     print('vrlo dobar si, kao midrko')
# elif 2.5<=prosek:
#     print('dobar')
# elif 1.5<=prosek:
#     print('dovoljan')
# else:
#     print('nedovoljan si govnetino jedna')
#===================================================================




#===================================================================
#Zadatak  3
# Задатак: Одмор на пола пута
# Путник се кретао T1 сати брзином V1
# km
# h
# , а затим T2 сати брзином V2
# km
# h
# и T3 сати брзином V3
# km
# h
# . Планирао
# је да се одмори на пола пута, израчунати после колико времена од почетка путовања је имао одмор.
# Улаз: Са стандардног улаза учитава се 6 реалних бројева, сваки у засебном реду: T1, V1, T2, V2, T3, V3.
# Излаз: На стандардни излаз исписати један реалан број који представља време потребно да путник стигне
# до пола пута. Допуштена грешка у израчунавању и приказу резултата је 10−3
# .
# Пример
# Улаз
# 1 10
# 2 20
# 3 30
# Излаз
# 3.667

#===================================================================


#===================================================================
#Zadatak  4
# Задатак: Растојање од тачке до дужи
# Одредити растојање дате тачке A од дате дужи A0A1 која лежи на x-оси (растојање тачке и дужи дефинише
# се као најкраће међу растојањима измећу те тачке и тачака те дужи).
# Улаз: Са стандардног улаза уносе се 4 реална броја (сваки у посебном реду):
# • x0 (−10 ≤ x0 < 10) – x-координата тачке A0(x0, 0)
# • x1 (x0 < x1 ≤ 10) – x-координата тачке A1(x1, 0)
# • x, y (−20 ≤ x, y, ≤ 20) – координате тачке A(x, y)
# Излаз: На стандардни излаз исписати један реалан број - најкраће растојање од тачке A до дужи A0A1,
# заокружено на пет децимала.
# Пример 1
# Улаз
# 0
# 1
# -1
# 1
# Излаз
# 1.41421
# Пример 2
# Улаз
# 0
# 1
# 0.5
# 3
# Излаз
# 3.00000
# from math import sqrt
# x0=float(input("Tacka pocetka prave: "))
# x1=float(input("Tacka kraja prave: "))
# x,y=map(float,input("Koordinate tacke: ").split())

# if x<0:
#     rastojanje=sqrt((x0-x)**2+y**2)
# else:
#     if x0>x:
#         rastojanje=sqrt((x0-x)**2+y**2)
#     elif x1>x:
#         rastojanje=y
#     else:
#         rastojanje=sqrt((x-x1)**2+y**2)
# print(format(rastojanje,'.5f'))
#===================================================================



#===================================================================
#Zadatak  5
# Задатак: Школарина
# У једној приватној школи уведено је правило којим се одређује износ попуста који остварују ученици приликом уписа у наредну школску годину. Ученици са одличним успехом остварују попуст од 40% укупног
# износа школарине, са врлодобрим 20% а са добрим 10%. Такође, ученици који су освојили награду на неком
# од државних такмичења остварују попуст од 30% укупног износа школарине. Уколико неки ученик испуњава
# два критеријума за попуст примењује се критеријум по коме је попуст већи. На основу пуног износа школарине, просечне оцене ученика и информације о наградама са такмичења одредити износ који ученик треба
# да плати при упису у наредну школску годину.
# Улаз: У првој линији стандардног улаза налази се пун износ школарине (реалан број), у другој просечна
# оцена ученика (реалан број од 2.0 до 5.0) а у трећој 0 уколико ученик нема награду или 1 уколико је има.
# Излаз: Износ школарине коју ученик треба да плати (заокружен на најближи цео број) наводи се у једној
# линије стандардног излаза.
# Пример
# Улаз
# 4000
# 4.65
# 1
# Излаз
# 2400

# sk=float(input("Skolarina mamu ti jebem vucicu: "))
# prosek=float(input('kakav si bio u vrticu: '))
# nagrada=int(input('da li si ikada dobio nagradu iz veronauke: '))
# prosek1=1
# if prosek>=4.5:
#     prosek1=(40/100)*sk
# elif prosek>=3.5:
#     prosek1=(20/100)*sk
# elif prosek>=2.5:
#     prosek1=(10/100)*sk
# prosek2=0
# if nagrada>0:
#     prosek2=(30/100)*sk
# najvecip=max(prosek1,prosek2)
# print(round(sk-najvecip))
#===================================================================



#===================================================================
#Zadatak  6
# Задатак: Солидарни порез
# Порез је одређен на следећи начин. Првих 60 000 динара бруто плате се не опорезује. На део бруто плате
# између 60 000 и 100 000 динара, плаћа се 20% пореза док се на део бруто плате преко 100 000 динара плаћа
# порез од 25%. Напиши програм који за унету бруто плату (плату пре одбијања пореза) израчунава нето плату
# (плату после одбијања пореза).
# Улаз: Са стандардног улаза се учитава један реалан број – износ бруто плате.
# Излаз: На стандардни излаз исписује се један реалан број – износ нето плате, заокружен на две децимале.
# Пример
# Улаз
# 100000
# Излаз
# 92000.00

# plata=float(input("Koliko te placaju: "))
# if plata <=60000:
#     plata=plata
# elif plata<=100000:
#     porez=(plata-60000)*(20/100)
#     plata-=porez
# else:
#     porez=(plata-60000)*(25/100)
#     plata-=porez
# print(format(plata,'.2f'))
#===================================================================


#===================================================================
#Zadatak  7                                            2/3 ja, 1/3 chagpt
# Задатак: Правоугаони прстен
# У програму за рад са графиком потребно је имплементирати интеракцију мишем са правоугаоницима нацртаним на екрану, чије су ивице паралелне координатним осама. Правоугаоник се мишем превлачи по екрану
# тако што се ухвати за ивицу, а да би се то лакше радило допуштена је толеранција од по 5 пиксела са сваке стране ивица правоугаоника. Када је миш близу ивице правоугаоника, ивица се исцртава другом бојом.
# Такође, када је миш унутар правоугаоника (а када миш није близу ивице) цео правоугаоник се боји неком
# трећом бојом. Напиши програм који за дату позицију миша и дати правоугаоник одређује да ли је миш близу ивице (рачунајући дату толеранцију), или је унутар правоугаоника, довољно далеко од ивице или је ван
# правоугаоника, довољно далеко од ивице.
# Улаз: Са стандардног улаза уноси се 6 целих бројева, сваки у посбној линији.
# • x, y - координате миша
# • x0, y0 - координате горњег левог темена правоугаоника
# • w, h - ширина и висина правоугаоника.
# Напомена: координата y у рачунарској графици расте одозго наниже.
# Излаз: На стандардни излаз исписати UNUTRA ако се миш налази унутар (проширених) ивица правоугаоника,
# SPOLJA ако је миш ван (проширених) ивица правоугаоника, тј. NA IVICI ако се налази на (проширеној) ивици
# правоугаоника.
# 55
# ГЛАВА 3. ГРАНАЊЕ
# Пример 1
# Улаз
# 101
# 101
# 100
# 100
# 100
# 100
# Излаз
# NA IVICI
# Пример 2
# Улаз
# 106
# 106
# 100
# 100
# 50
# 100
# Излаз
# UNUTRA
# Пример 3
# Улаз
# 94
# 94
# 100
# 100
# 50
# 100
# Излаз
# SPOLJA

# x,y=map(int,input('koordinate misa: ').split())
# x0,y0=map(int,input('koordinate gornjeg levog ugla: ').split())
# w,h=map(int,input('sirina i visina; ').split())
# x1,y1=x0+w,y0+h #x1 ima istu y koordinatu kao y0 a y2 ima istu x koordinatu kao x0
# t=5
# if x0 - t <= x <= x1 + t and y0 - t <= y <= y1 + t:
#     # Na ivici ako je blizu bilo koje ivice (±5 zona)
#     if (x0 - t <= x <= x0 + t or x1 - t <= x <= x1 + t or
#         y0 - t <= y <= y0 + t or y1 - t <= y <= y1 + t):
#         print("NA IVICI")
#     else:
#         print("UNUTRA")
# else:
#     print("SPOLJA")
#===================================================================



#===================================================================
#Zadatak  8
# Задатак: Оцена на испиту
# Оцена на испиту одређује се на основу броја освојених поена (може се освојити између 0 и 100 поена). Сви
# студенти који су добили мање од 51 поен аутоматски падају испит и добијају оцену 5. Оцена 6 се добија за
# број поена већи или једнак од 51, а мањи од 61, оцена 7 за број поена већи или једнак од 61, а мањи од 71,
# оцена 8 за број поена већи или једнак од 71, а мањи од 81, оцена 9 за број поена већи или једнак од 81 а мањи
# од 91, а оцена 10 за број поена већи или једнак од 91.
# Улаз: Са стандардног улаза учитава се један цео број између 0 и 100 који представља број поена освојених
# на испиту.
# Излаз: На стандардни излаз исписати један цео број - оцену на испиту.
# Пример 1
# Улаз
# 73
# Излаз
# 8
# Пример 2
# Улаз
# 50
# Излаз
# 5
# Пример 3
# Улаз
# 51
# Излаз
# 6
# Пример 4
# Улаз
# 100
# Излаз
# 10

# poeni=int(input('kolikko broj poena si dobbiobiob: '))
# if poeni>=91:
#     ocena=10
# elif poeni>=81:
#     ocena=9
# elif poeni>=71:
#     ocena=8
# elif poeni>=61:
#     ocena=7
# elif poeni>=51:
#     ocena=6
# else:
#     ocena=5
# print(ocena)
#===================================================================


#===================================================================
#Zadatak  9
# Задатак: Редни број месеца
# Напиши програм који на основу назива месеца одређује његов редни број.
# Улаз: Са стандардног улаза се уноси назив месеца записан малим словима латинице.
# Излаз: На стандардни излаз исписати један природан број који представља редни број месеца.
# Пример
# Улаз
# mart
# Из 3

# mesec=input('koji je mesec ')
# indeks=''
# if mesec=="januar":
#     indeks=1
# elif mesec=='februar':
#     indeks=2
# elif mesec=='mart':
#     indeks=3
# elif mesec=='april':
#     indeks=4
# elif mesec=='maj':
#     indeks=5
# elif mesec=="jun":
#     indeks=6
# elif mesec=='jul':
#     indeks=7
# elif mesec=='avgust':
#     indeks=8
# elif mesec=='septembar':
#     indeks=9
# elif mesec=='oktobat':
#     indeks=10
# elif mesec=='novembar':
#     indeks=11
# elif mesec=='decembar':
#     indeks=12
# print(indeks)
#===================================================================



#===================================================================
#Zadatak  10
# Задатак: Број дана у месецу
# Напиши програм који за дати редни број месеца и годину одређује број дана у том месецу. Водити рачуна
# о томе да ли је година преступна (година је преступна ако је дељива са 4, а није дељива са 100, осим ако је
# дељива са 400, када јесте преступна).
# Улаз: Са стандардног улаза учитавају се два броја:
# • број месеца m (1 ≤ m ≤ 12) и
# • број године g (1900 ≤ g ≤ 2100)
# Излаз: На стандардни излаз исписати један цео број који представља број дана у задатом месецу.
# Пример 1
# Улаз
# 11
# 2014
# Излаз
# 30
# Пример 2
# Улаз
# 2
# 2014
# Излаз
# 28
# Пример 3
# Улаз
# 2
# 2016
# Излаз
# 29
# Пример 4
# Улаз
# 2
# 2000
# Излаз
# 29
# Пример 5
# Улаз
# 2
# 2100
# Излаз
# 28
# Пример 6
# Улаз
# 4
# 2019
# Излаз
# 30
# Пример 7
# Улаз
# 8
# 2018
# Излаз
# 31
# mesec=int(input('koji je mesec robe: '))
# godina=int(input('godina sazaljenja: '))
# dani=0
# if mesec==1:
#     dani=31
# elif mesec==2:
#     dani=28
# elif mesec==3:
#     dani=31
# elif mesec==4:
#     dani=30
# elif mesec==5:
#     dani=31
# elif mesec==6:
#     dani=30
# elif mesec==7:
#     dani=31
# elif mesec==8:
#     dani=31
# elif mesec==9:
#     dani=30
# elif mesec==10:
#     dani=31
# elif mesec==11:
#     dani=30
# else:
#     dani=31
# if godina%4==0 and godina%100!=0 or godina%400==0:
#     if mesec==2:
#         dani=29
# print(dani)
#===================================================================



#===================================================================
#Zadatak  11
# Задатак: Назив месеца
# Напиши програм који на основу унетог редног броја месеца исписује његов назив.
# Улаз: Сa стандардног улаза се уноси редни број месеца - природан број између 1 и 12.
# Излаз: На стандардни излаз исписати назив месеца (исписан латиничким ASCII карактерима).
# Пример
# Улаз
# 1
# Излаз
# januar

# mesec=int(input('mesec bro '))
# if mesec==1:
#     bro='januar'
# elif mesec==2:
#     bro='februar'
# elif mesec==3:
#     bro='mart'
# elif mesec==4:
#     bro='april'
# elif mesec==5:
#     bro='maj'
# elif mesec==6:
#     bro='jun'
# elif mesec==7:
#     bro='jul'
# elif mesec==8:
#     bro="avgust"
# elif mesec==9:
#     bro='septembar'
# elif mesec==10:
#     bro='oktobar'
# elif mesec==11:
#     bro='novembar'
# elif mesec==12:
#     bro='decembar'
# print(bro)
#===================================================================


#===================================================================
#Zadatak  12
# Задатак: Пунолетство
# Написати програм којим се испитује да ли ће особа чији је датум рођења познат бити пунолетна (имати пуних
# 18 година) неког задатог датума.
# Улаз: У прве три линије се уноси датум рођења у редоследу дан, месец и година рођења. У следеће три
# задати датум у редоследу дан, месец и година. Оба датума су исправна.
# Излаз: Исписати на стандардном излазу: DA - ако ће особа бити пунолетна, и NE - ако особа неће бити
# пунолетна. Ако је један задати датум тачно 18 година након датума рођења, особа се сматра пунолетном (без
# обзира на тачно време рођења).
# Пример 1
# Улаз
# 1
# 5
# 1986
# 1
# 5
# 2004
# Излаз
# DA
# Пример 2
# Улаз
# 1
# 5
# 1986
# 30
# 4
# 2004
# Излаз
# NE

# dan1=int(input('dan rodjenja '))
# mesec1=int(input('mesec rodjenja '))
# godina1=int(input('godina rodjenja '))
# dan2=int(input('dan kada ce to biti '))
# mesec2=int(input('zeljeni mesec '))
# godina2=int(input('zeljena godina '))

# if godina2-godina1>18:
#     print('da')
# elif godina2-godina1==18:
#     if mesec2>mesec1:
#         print('da')
#     elif mesec2==mesec1:
#         if dan2>=dan1:
#             print('da')
#         else:
#             print('ne')
#     else:
#         print('ne')
# else:
#     print('ne')
#===================================================================



#===================================================================
#Zadatak  13
# Задатак: Бољи у две дисциплине
# Такмичари су радили тестове из математике и програмирања. За сваки предмет добили су одређени број
# поена (цео број од 0 до 50). Такмичари се рангирају по укупном броју поена из оба предмета. Ако два
# такмичара имају исти број поена, победник је онај који има више поена из програмирања. Потребно је
# написати програм који одређује победника такмичења.
# Улаз: Учитавају се подаци за два такмичара. За сваког такмичара учитава се број поена из математике, а
# затим број поена из програмирања, сваки у посебном реду.
# Излаз: Потребно је исписати редни број победника (1 или 2). Ако су два такмичара остварила потпуно исти
# успех, победник је такмичар 1 (јер је остварио више поена на квалификационом такмичењу).
# Пример 1
# Улаз
# 37
# 45
# 22
# 47
# Излаз
# 1
# Објашњење
# Први такмичар укупно има 37+45=82, а други 22+47=69 поена, тако да је победник први такмичар.
# Пример 2
# Улаз
# 43
# 40
# 40
# 43
# Излаз
# 2

# mat1=int(input('poeni iz matematike za prvog ucenika '))
# pro1=int(input('poceni iz programiranja za prvog ucenika '))
# mat2=int(input('poeni iz matematike za drugog ucenika '))
# pro2=int(input('poeni iz programiranja za drugog ucenika '))

# broj1=mat1+pro1
# broj2=mat2+pro2
# if broj1>broj2:
#     print('1')
# elif broj1==broj2:
#     if pro1>pro2:
#         print("1")
#     else:
#         print('2')
# else:
#     print('2')
#===================================================================



#===================================================================
#Zadatak  14
# Задатак: Ко је пре стигао
# Два другара, Пера и Мика, су дошла у школу. Ако се за сваког зна сат, минут и секунд када је стигао, напиши
# програм који одређује који од њих је стигао пре.
# Улаз: Са стандардног улаза учитава се 6 целих бројева. Прво сат, минут и секунд када је стигао Пера, а затим
# сат, минут и секунд када је стигао Мика (претпоставља се да бројеви представљају исправно задата времена).
# Излаз: На стандардни излаз исписати једну линију текста: Pera ако је пре стигао Пера, Mika ако је пре стигао
# Мика или istovremeno ако су стигли истовремено.
# 62
# 3.3. УГНЕЖЂЕНО ГРАНАЊЕ
# Пример
# Улаз
# 14
# 23
# 17
# 15
# 23
# 11
# Излаз
# Pera

# sat1=int(input('sat kada je stigao pera: '))
# min1=int(input('minut kada je stigao pera: '))
# sek1=int(input('sekund kada je stigao pera: '))
# sat2=int(input('sat kada je stigao mika: '))
# min2=int(input('minut kada je stigao mika: '))
# sek2=int(input('sekunda kada je stigao mika: '))
# if sat1<sat2:
#     print('pera')
# elif sat1==sat2:
#     if min1<min2:
#         print('pera')
#     elif min1==min2:
#         if sek1<sek2:
#             print('pera')
#         elif sek1==sek2:
#             print('istovremeno')
#         else:
#             print('mika')
#     else:
#         print('mika')
# else:
#     print('mika')
    
# if (sat1,min1,sek1)<(sat2,min2,sek2):
#     print('Pera')
# elif (sat1,min1,sek1)>(sat2,min2,sek2):
#     print('mika')
# else:
#     print('istovremeno')
#===================================================================




#===================================================================
#Zadatak  15                                   ponovljen ali ovog puta sa hijerarhijom if else
# Задатак: Два броја истог знака
# Написати програм којим се проверава да ли су два цела броја истог знака.
# Улаз: На стандардном улазу налазе се два цела броја a, b (−104 ≤ a, b ≤ 104
# ), оба различита од нуле.
# Излаз: Једна линија стандарног излаза која садржи реч da ако су дати бројеви истог знака, иначе садржи реч
# ne.
# Пример
# Улаз
# 234
# -34
# Излаз
# ne

# a=int(input('a '))
# b=int(input('b '))

# if a>0:
#     if b>0:
#         znak=True
#     else:
#         znak=False
# elif a<0:
#     if b<0:
#         znak=True
#     else:
#         znak=False

# if znak:
#     print('da')
# else:
#     print('ne')
#===================================================================



#===================================================================
#Zadatak  16
# Задатак: Линеарна једначина
# Напиши програм који одређује број решења линеарне једначине a · x + b = 0 за реалне вредности 
#коефицијената a и b и решава је ако постоји јединствено решење.
# Улаз: У првом реду коефицијент a, у другом коефицијент b.
# Излаз: Ако има једно решење испис решења на две децимале, ако нема решења порука: NEMA RESENJA, ако
# има бесконачно много решења порука: BESKONACNO RESENJA.
# Пример 1
# Улаз
# 1
# 1
# Излаз
# -1.00
# Пример 2
# Улаз
# 0
# 0
# Излаз
# BESKONACNO RESENJA
# Пример 3
# Улаз
# 0
# 1
# Излаз
# NEMA RESENJA

# a=int(input('a '))
# b=int(input('b '))
# if a==True:
#     x=-b/a
#     print(format(x,'.2f'))
# elif a==False and b==True:
#     print('NEMA RESENJA JER OVO NIJE RESENJE(valjda)')
# else:
#     print('BESKONACNO MNOGO RESENJA (NEMA BRE)')
#===================================================================



#===================================================================
#Zadatak  17                    ponovili su ga ali resenje je slicno kao sto sam ga je prethodno uradio
# Задатак: Икс-окс
# Мирко је мали програмер који покушава да испрограмира игрицу икс-окс. Близу је завршетка, али му је
# потребна мала помоћ. Смислио је да корисник мишем одређује квадрат у који ће се његов симбол уписати.
# Поље за игру се састоји од 9 квадрата (распоређена у три врсте и три колоне) и сваки квадрат је димензије
# 100 пута 100 пиксела (укупно поље је димензије 300 пута 300 пиксела). Познат је положај пиксела на који је
# кликнуто мишем и потребно је одредити редни број квадрата у којем се тај пиксел налази. Положај пиксела је
# одређен редним бројевима (координатама) тог пиксела по хоризонтали и по вертикали, рачунајући од доњег
# 24
# 2.3. ЦЕЛОБРОЈНО ДЕЉЕЊЕ
# левог угла поља (пиксели се броје од 1 до 300). Квадрати се броје од 1 до 9, врсту по врсту, почевши од доњег
# левог угла поља, како је приказано на следећој слици:
# 7 8 9
# 4 5 6
# 1 2 3
# Улаз: Са стандардног улаза се учитавају два цела броја (сваки у посебном реду) x и y (1 ≤ x, y ≤ 300) који
# представљају x тј. y координату пиксела на који је кликнуто мишем.
# Излаз: На стандардни излаз се исписује један број од 1 до 9 који представља редни број квадрата.
# Пример 1
# Улаз
# 1
# 1
# Излаз
# 1
# Пример 2
# Улаз
# 120
# 280
# Излаз
# 8
# Пример 3
# Улаз
# 100
# 201
# Излаз
# 7
# Пример 4
# Улаз
# 101
# 300
# Излаз
# 5
#===================================================================


#===================================================================
#Zadatak  18
# Задатак: Квадранти и осе
# Дате су координате тачке. Напиши програм који одређује у ком квадранту или на којој оси се она налази.
# Улаз: Са стандардног улаза уносе се два цела броја (сваки у посебном реду): x-координата и y-координата
# тачке (−10 ≤ x, y ≤ 10).
# Излаз: На стандардни излаз исписати да ли се тачка налази у неком од четири квадранта, да ли је на неком
# делу неке координатне осе или је координатни почетак.
# Пример 1
# Улаз
# -1
# 2
# Излаз
# 2. kvadrant
# Пример 2
# Улаз
# 0
# 3
# Излаз
# pozitivni deo y ose
# Пример 3
# Улаз
# 0
# 0
# Излаз
# koordinatni pocetak

# x=int(input('x koordinata '))
# y=int(input('y koordinata '))

# if x>0 and y>0:
#     print('1 kvandrant')
# elif x<0 and y>0:
#     print('2 kvandrant')
# elif x<0 and y<0:
#     print('3 kvandrant')
# elif x>0 and y<0:
#     print('4 kvandrant')
# elif x==0:
#     if y>0:
#         print('+ y osa')
#     elif y<0:
#         print('- y osa')
#     else:
#         print('koordinatni pocetak')
# else:
#     if x>0:
#         print('+ x osa')
#     elif x<0:
#         print('- x osa')
#     else:
#         print('koordianatni pocetak')
#===================================================================



#===================================================================
#Zadatak  19                                        logika polu tacna
# Задатак: Размакнуте дијагонале
# На једној необичној шаховској табли црна поља су распоређена по споредним дијагоналама тако да су у првој
# врсти прва два поља бела, затим иде једно црно поље, затим два бела, па црно и тако у круг. Једна таква табла
# је приказана на слици. Напиши програм који одређује боју поља на основу унетих координата.
# 65
# ГЛАВА 3. ГРАНАЊЕ
# Слика 3.2: Размакнуте дијагонале
# Улаз: Са стандардног улаза се учитавају редни бројеви врсте и колоне три поља v (1 ≤ v ≤ 100) и k
# (1 ≤ k ≤ 100), раздвојене једним размаком (за свако поље у посебном реду).
# Излаз: На стандардни излаз исписати боју поља (crno или belo), за свако поље у посебном реду.
# Пример
# Улаз
# 1 5
# 2 4
# 3 4
# Излаз
# belo
# belo
# crno

# v1,k1=map(int,input('v1 i k1: ').split())
# v2,k2=map(int,input('v2 i k2: ').split())
# v3,k3=map(int,input('v3 i k3 ').split())
# if v1%3==0:
#     print('crno')
# else:
#     print('belo')

# if ((v2%3)-2)==0:
#     print('belo')
# else:
#     print('crno')

# if ((v3%3)-1)==0:
#     print('belo')
# else:
#     print('crno')
#===================================================================


#===================================================================
#Zadatak  20
# Задатак: Положај две праве
# Дате су две праве својим имплицитним једначинама (једначинама облика Ax + By + C = 0). Одредити
# њихов међусобни положај (поклапају се, паралелне су или се секу у тачки…)
# Улаз: У 6 линија стандардног улаза налази се у свакој по један реалан број. Прва три броја редом 
#представљају коефицијенте A, B и C једне праве, а друга 3 коефицијенте друге праве.
# Излаз: У једној линији стандардног излаза исписује се текст poklapaju se за праве које се поклапају,
# paralelne su за паралелне праве или seku se за праве које се секу. Ако се праве секу у другој линији
# стандардног излаза исписују се координате пресечне тачке (2 реална броја са две децимале).
# Пример
# Улаз
# 5
# 0
# -10
# 1
# 1
# 0
# Излаз
# seku se
# 2.00 -2.00

# a1=float(input('a1 '))
# b1=float(input('b1 '))
# c1=float(input('c1 '))
# a2=float(input('a2 '))
# b2=float(input('b2 '))
# c2=float(input('c2 '))

# if a1*b2==a2*b1 and a1*c2==a2*c1 and b1*c2==b2*c1:
#     print('poklapaju se')
# elif a1*b2==a2*b1 and a1*c2!=a2*c1:
#     print('paralelne su ')
# else:
#     d=a1*b2-a2*b1
#     dx=-c1*b2+c2*b1
#     dy=-a1*c2+a2*c1
#     x=dx/d
#     y=dy/d
#     print(format(x,'.2f'))
#     print(format(y,'.2f'))
#===================================================================



#===================================================================
#Zadatak  21
# Задатак: Куглице
# У свакој од две кутије налазе се само црвене и плаве куглице. Напиши програм који за дати број црвених
# и плавих куглица у свакој од кутија одређује најмањи број куглица које је потребно преместити из кутије у
# кутију да би у једној кутији биле само црвене, а у другој само плаве куглице.
# Улаз: Са стандардног улаза учитавају се четири цела броја (сваки у посебном реду): број црвених куглица у
# првој кутији, број плавих куглица у првој кутији, број црвених куглица у другој кутији и број плавих куглица
# у другој кутији.
# Излаз: На стандардни излаз исписати један цео број – укупан број куглица које треба преместити из кутије
# у кутију.
# Пример
# Улаз
# 10
# 5
# 7
# 8
# Излаз
# 12

# c1=int(input('broj crvenih lopti u prvoj kutiji '))
# p1=int(input('broj plavih lopti u prvoj kutiji '))
# c2=int(input('broj crvenih lopti u drugoj kutiji '))
# p2=int(input('broj plabih lopti u drugoj kutiji '))

# maks=0
# if c1>=p1:
#     maks+=p1
# else:
#     maks+=c1
# if c2>=p2:
#     maks+=p2
# else:
#     maks+=c2
# print(maks)
#===================================================================




















































