#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 13 23:17:11 2025

@author: alex
"""
def ispisati(x):
    print("#===================================================================")
    print("#Zadatak ", x)
    
    
    print("#===================================================================")
    
    

#===================================================================
#Zadatak  1
#Написати функцију која враћа најучесталији карактер ниске.
def ucestaliji(niska):
    karakteri={}
    for i in niska:
        if i in karakteri:
            karakteri[i]+=1
        else:
            karakteri[i]=1
    niska=[g for g in karakteri.values()]
    for h in karakteri:
        if karakteri[h]==max(niska):
            return h 
#===================================================================


#===================================================================
#Zadatak  2
# Написати функцију коjа враћа сортиран низ свих кључева улазног речника коjи имаjу задату циљану
#  вредност, а уколико пак таквих кључева у речнику нема, функција ће вратити празан низ.

# # Додатно објашњење: Функција прима речник чиjи су кључеви цели броjеви, а вредности су му произвољне, 
# док враћа сортиран низ кључева унетог речника коjи су повезани на задату вредност.

def trazeno(recnik, vrednost):
    niz=[]
    for i in recnik:
        if recnik[i]==vrednost:
            niz.append(i)
    niz.sort()
    return niz
#===================================================================

#===================================================================
#Zadatak  3
#Написати функцију коjа врши инверзиjу речника са непроменљивим вредностима. Инверзни речник почетног 
# речника jесте нов речник чиjи су кључеви заправо вредности изворног речника. Вредности инверзног речника
#  су сортирани низови свих кључева почетног речника повезаних на задату вредност.
def inverzija(recnik):
    novi={}
    for i,k in recnik.items():
        if k not in novi:
            novi[k]=[i]
        else:
            novi[k].append(i)
    for vrednost in novi:
        novi[vrednost].sort()
    return novi
#===================================================================


#===================================================================
#Zadatak  4
#Дат је низ бројева. Желимо да наш низ постане монотоно растући низ. То можемо да средимо само 
#инкрементовањем чланова низа. Написати функцију која враћа минималан број инкрементовања.
def inkrementacija(niz):
    koliko=0
    for i in range(len(niz)):
        if niz[i]<niz[i-1] and niz[i-1]!=niz[-1]:
            niz[i]=niz[i-1]+1
            koliko+=niz[i-1]-niz[i]
    return koliko
#===================================================================

#===================================================================
#Zadatak  5
#Размотримо следећу секвенцу бројева: 0, 1, 1, 2, 3, 5, 8, 13, 12, 7, 10, 8, 9… Нулти елемент је једнак 
# 0, а први елемент једнак 1. Сваки следећи елемент је дефинисан рекурзивно, и он је једнак збиру цифара 
# претходна два. Написати функцију која ће вратити н-ти члан овако дефинисане секвенце бројева.
def zbir(broj):
    return sum(int(i)for i in str(broj))
def iterativno(clan):
    if clan==0:
        return 0
    if clan==1:
        return 1
    a,b=0,1
    for _ in range(2,clan+1):
        sledeci=zbir(a)+zbir(b)
        a,b=b,sledeci 
    return b
#===================================================================


#===================================================================
#Zadatak  6
#Написати функцију која ће вратити максималан број карактера ‘a’ који се могу додати у улазну ниску 
# тако да резултујућа ниска нема 3 узастопна таква карактера. Уколико улазна ниска већ има 3 узастопна 
# карактара ‘a’ вратити -1.
def a(niska):
    nova=[]
    brojac=0
    for i in niska:
        if i!='a':
            nova.extend(['aa',i])
            brojac=0
        elif i=='a':
            brojac+=1
    if brojac>=3:
        return -1 
    if niska[-1]!='a' or niska[-1]==a:
        nova.extend(['aa'])
    
    return ''.join(nova)
#===================================================================

#===================================================================
#Zadatak  7
#Дат је низ цене где је цене[i] цена акције i-тог дана. Желимо да максимизујемо наш профит тако што 
# ћемо изабрати ког дана ћемо купити акцију и ког дана ћемо је продати. Уколико не можемо да профитирамо,
#  нећемо купити ниједну акцију, па ће наш профит бити 0. Написати функцију која ће за улазни низ цена 
#  вратити колико максимално можемо да профитирамо.
def naj(niska):
    mincena=niska[0]
    maxprofit=0
    for cena in niska[1:]:
        profit=cena-mincena 
        if profit>maxprofit:
            maxprofit=profit
        if cena<mincena:
            mincena=cena 
    return maxprofit 
#===================================================================













