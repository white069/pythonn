#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May 16 16:34:02 2025

@author: alex
"""

def ispisati(x):
    print("#===================================================================")
    print("#Zadatak ", x)
    
    
    print("#===================================================================")
    
    
#izbrisala mi se prethodna dva
#===================================================================
#Zadatak  3
# Задатак: Мали лото
# У једном одељењу су одлучили да у склопу новогодишње приредбе организују мало извлачење игре лото. Да
# би повећали шансе за добитак, одлучили су да се извлаче само три куглице. Напиши програм који исписује које све комбинације могу бити извучене, ако се зна да у бубњу има n различитих куглица обележених
# бројевима од 1 до n.
# Улаз: Са стандардног улаза се уноси број n (4 ≤ n ≤ 20).
# Излаз: На стандардни излаз испиши све комбинације, при чему су бројеви у свакој комбинацији сортирани
# растуће, а комбинације су лексикографски сортиране.
# Пример
# Улаз
# 4
# Излаз
# 1 2 3
# 1 2 4
# 1 3 4
# 2 3 4

# n = int(input())
# for b1 in range(1, n+1): # broj na loptici 1
#     for b2 in range(b1+1, n+1): # broj na loptici 2
#         for b3 in range(b2+1, n+1): # broj na loptici 3
#             print(b1, b2, b3)
#===================================================================    
    
    
#===================================================================
#Zadatak  4
# Задатак: Коцкице за јамб
# Исписати све резултате бацања три коцкице за јамб у којима је збир бројева једнак задатом броју X (природан број од 3 до 18) ако је редослед коцкица битан (на пример, 2, 2, 3 није исто као 2, 3, 2).
# Улаз: У једној линији стандардног улаза наводи се природан број X (3 ≤ X ≤ 18) који представља збир
# бројева на којима су се зауставиле коцкице.
# Излаз: У свакој линији стандардног излаза исписују се три природна броја (бројеви од 1 до 6) који представљају резултат бацања три коцкице. Резултате приказати сортиране лексикографски (у растућем редоследу
# троцифрених бројева који се формирају од три цифре на коцкицама).
# Пример
# Улаз
# 5
# Излаз
# 1 1 3
# 1 2 2
# 1 3 1
# 2 1 2
# 2 2 1
# 3 1 1

# broj=int(input('trazeni broj '))
# for i in range(1,7):
#     for g in range(1,7):
#         for h in range(1,7):
#             if (i+g+h)==broj:
#                 print(i,g,h)
#===================================================================    
    
#===================================================================
#Zadatak  5
# Задатак: Комбинације поена
# На кошаркашкој утакмици кошеви се бодују са 1, 2 или 3 поена. Потребно је одредити све комбинације
# броја кошева који су бодовани са 1 поеном, са 2 и са 3 поена ако је познат укупан број поена једног тима на
# кошаркашкој утакмици.
# Улаз: У првој линији стандардног улаза налази се укупан број поена на кошаркашкој утакмици (природан
# број између 40 и 150).
# Излаз: Свака линија стандардног излаза треба да садржи број кошева који су бодовани са 3, затим са 2 и на
# крају са 1. Комбинације треба да буду уређене лексикографски.
# Пример
# Улаз
# 6
# Излаз
# 6
# 0 0 6
# 0 1 4
# 0 2 2
# 0 3 0
# 1 0 3
# 1 1 1
# 2 0 0
# bodovi=int(input('broj bodova '))
# for trojke in range(0,bodovi+1,3):
#     for dvojke in range(0,bodovi+1,2):
#         for bod in range(0,bodovi+1):
#             if (trojke+dvojke+bod) == bodovi:
#                 print(trojke//3,dvojke//2, bod)
#===================================================================    
    
#===================================================================
#Zadatak  6
# Задатак: Цикличне пермутације
# Цикличним померањем за једно место улево низа бројева x1, x2, x3, ..., xn добијамо x2, x3, ..., xn, x1, ако
# вршимо циклично померање за два места улево добијамо x3, ..., xn, x1, x2. Добијени низови представљају
# цикличне пермутације полазног низа.
# Написати програм којим се за дати природан број n приказују низови бројева добијени цикличним померањем низа бројева 1, 2, …, n редом за 0, 1, 2, …, n − 1 места улево.
# Улаз: Прва линија стандардног улаза садржи природан број n ≤ 30.
# Излаз: Стандардни излаз садржи n линија, у којима су приказани тражени низови бројева, бројеви у низовима међусобно су одвојени бланко знаком.
# Пример
# Улаз
# 4
# Излаз
# 1 2 3 4
# 2 3 4 1
# 3 4 1 2
# 4 1 2 3
# n=int(input('broj '))
# petlja=[i for i in range(1,n+1) ]
# nova=petlja
# while n>0:
#     for g in nova:
#         print(g,sep=" ",end="")
#     try:
#         for h in range(len(nova)):
#             nova[h]=nova[h+1]
#     except:
#         nova[-1]=nova[0]
#     n-=1 
# n = int(input())
# for i in range(1, n+1):
#     for j in range(i, n+1):
#         print(j, ' ', sep='', end='')
#     for j in range(1, i):
#         print(j, ' ', sep='', end='')
#         print()
#===================================================================    
    
#===================================================================
#Zadatak  7
# Задатак: Троуглови целобројних страница, задатог обима
# Написати програм којим се одређују дужине страница троуглова a, b, c, такве да су a, b и c природни бројеви
# за које важи да је a ≤ b ≤ c и да је обим троугла a + b + c једнак датом природном броју O.
# Улаз: У једној линији стандардног улаза задат је природан број O (3 ≤ O ≤ 250) који представља обим
# троугла.
# Излаз: У свакој линији стандардног излаза налазе се три природна броја одвојена празнином, који представљају могуће дужине страница троугла задатог обима. Тројке треба да буду лексикографски сортиране.
# Пример
# Улаз
# 7
# Излаз
# 1 3 3
# 2 2 3
# def postoji(i,h,g):
#     if i+h>=g and i+g>=h and h+g>=i:
#         return True 
#     return False 
# o=int(input('obim '))
# for i in range(1,o+1):
#     for h in range(1,o+1):
#         for g in range(1,o+1):
#             if i<=h<=g and i+h+g==o:
#                 if postoji(i, h, g):

#                     print(i,h,g)
#===================================================================    
    
    
#===================================================================
#Zadatak  8
# Задатак: Сви суфикси низа бројева од 1 до n
# Својевремено је постојала реклама за фирму “Југодрво” у којој се појављивала песмица “Југодрво-угодрвогодрво-одрво-дрво-рво-во-о” у којој су се одређивали сви суфикси дате речи. Слично, али мало једноставније
# је исписати све суфиксе низа природних бројева од 1 до n. Напиши програм који за дато n исписати све
# чланове низа 1, 2, 3, . . . , n, 2, 3, 4, . . . , n, 3, 4, . . . , n, . . . , n − 1, n, n.
# Улаз: Са стандардног улаза се учитава природан број n у границама од 1 до 30.
# Излаз: Бројеви се исписују на стандардни излаз, раздвојени размацима, сваки суфикс у посебном реду.
# Пример
# Улаз
# 4
# Излаз
# 1 2 3 4
# 2 3 4
# 3 4
# 4
# n=int(input('broj '))
# for i in range(1,n+1):
#     print()
#     for g in range(i,n+1):
#         print(g, " ",sep="",end="")
#===================================================================    
    
#===================================================================
#Zadatak  9
# Задатак: Сви префикси низа бројева од 1 до n
# За дато n исписати све префиксе низа природних бројева који почињу са 1 и завршавају се са бројем мањим
# или једнаким од n.
# Улаз: Са стандардног улаза се учитава цео број n (1 ≤ n ≤ 20).
# Излаз: На стандардни излаз исписати све тражене префиксе, сваки у посебном реду у растућем редоследу
# дужина. Иза сваког елемента сваког префикса треба да буде исписан по један размак.
# Пример
# Улаз
# 3
# Излаз
# 1
# 1 2
# 1 2 3
# n=int(input('broj brojevaa '))
# for i in range(1,n+1):
     
#     for g in range(1,i+1):
#         print(g,' ',end="",sep=" ")
     
#     print()
#===================================================================

#===================================================================
#Zadatak  10
# Задатак: Све подречи
# Напиши програм који ће исписати све подречи дате речи и то у растућем редоследу почетних позиција и
# растућем редоследу дужине. Напомена: у већини језика је слово на позицији i речи s могуће очитати изразом
# s[i].
# Улаз: Са стандардног улаза се учитава једна реч састављена само од малих слова енглеске абецеде.
# Излаз: На стандардни излаз исписати тражене подречи, сваку у посебном реду.
# Пример
# Улаз
# abc
# Излаз
# a
# ab
# abc
# b
# bc
# c

# string=input('neki karakteri nzm ')
# for karakter in range(len(string)):
#     p=karakter 
#     svi=string[p]
#     print(svi)
#     for g in string[p+1:]:
#         svi+=g
#         print(svi)
#===================================================================

#===================================================================
#Zadatak  11
# Задатак: Све подречи дужине n
# Дата је реч и природан број n. Напиши програм који исписује све њене подречи (сегменте узастопних карактера) дужине n.
# Улаз: Први ред стандардног улаза садржи реч састављену од малих слова енглеског алфабета, а други садржи
# број n.
# Излаз: На стандардни излаз исписати све тражене подречи, с лева на десно, сваку у посебном реду.
# Пример
# Улаз
# abcdef
# 3
# Излаз
# abc
# bcd
# cde
# def
# string=input('eki karakteri boli me muda ')
# n=int(input('koliko ponavljanja '))
# for karakter in range(len(string)-(n-1)):
#     svi=''
#     for i in range(karakter,karakter + n):
#         svi+=string[i]
#     print(svi)
#===================================================================

#===================================================================
#Zadatak  12
# Задатак: Све подречи по опадајућој дужини
# За унету реч исписати све подречи у редоследу опадајуће дужине и растућих левих граница за речи исте
# дужине.
# Улаз: Са стандардног улаза се уноси једна реч састављена само од малих слова енглеске абецеде.
# Излаз: На стандардни излаз исписати тражене подречи, сваку у посебном реду.
# Пример
# Улаз
# abc
# Излаз
# abc
# ab
# bc
# a
# b
# c

# s=input('string neki idk ')
# for i in range(len(s)):
#     svi=''
#     neki=''
#     for c in range(i,len(s)):
#         svi+=s[c]
#     for k in range(len(s)-1):
#         neki+=s[k]
#     if neki!=svi:
#         print(neki)
#     print(svi)

# s = input()
# # duzina reci
# for d in range(len(s), 0, -1):
# # rec duzine d je odredjena indeksima [i, i + d - 1]
#     for i in range(len(s) - d + 1):
#         for j in range(i, i+d):
#             print(s[j], end=””)
#         print()
#===================================================================

#===================================================================
#Zadatak  13
# Задатак: Цикличне подречи
# Напиши програм који исписује све подречи које се могу добити читањем слова дате речи кренувши од неког
# слова, у круг, назад до тог слова.
# Улаз: Са стандардног улаза се учитава реч састављена од малих слова, не дужа од 100 карактера.
# Излаз: На стандардни излаз исписати тражене цикличне пермутације те речи.
# Пример
# Улаз
# zdravo
# Излаз
# zdravo
# dravoz
# ravozd
# avozdr
# vozdra
# ozdrav
# rec=input('neka mala recica ')
# print(rec)
# n=len(rec)
# while n>1:
#     rec=rec[1:]+rec[:1]
#     print(rec)
#     n-=1


#===================================================================


#===================================================================
#Zadatak  14
# 4.3.3 Цртежи помоћу карактера
# Задатак: Квадрат од звездица
# Напиши програм који исцртава квадрат од карактера * (као што је приказано у примерима).
# Улаз: Са стандардног улаза се учитава природан број n (1 ≤ n ≤ 20), који представља димензију квадрата
# (број звездица у свакој врсти и колони).
# Излаз: На стандардни излаз исписати тражени цртеж.
# Пример
# Улаз
# 4
# Излаз
# ****
# ****
# ****
# ****
# zvezde=int(input('broj i kolona zvezdica malih koje abnormalno hoces '))
# n=zvezde 
# while n>0:
#     for i in range(zvezde):
#         print('*',sep="",end="")
#     print()
#     n-=1
#===================================================================

#===================================================================
#Zadatak  15
# Задатак: Троугао од звездица
# Напиши програм који исцртава троугао какав је приказан у примеру.
# Улаз: Са стандардног улаза се учитава један природан број n (1 ≤ n ≤ 30), који представља висину троугла
# (број редова које цртеж садржи).
# Излаз: На стандардни излаз се исписује тражени троугао, исписивањем карактера *, размака (карактера бланко) и преласка у нови ред. После сваке последње звездице у свакој врсти прећи у наредни ред (не исписивати
# размаке после звездица).
# Пример
# Улаз
# 4
# Излаз
#    *
#   ***
#  *****
# *******

# n=int(input('broj redova '))
# raz=n-1
# kol=1
# for i in range(n):
#     for g in range(raz):
#         print(' ',sep='   ',end="")
#     print(("*"*kol))
#     raz-=1
#     kol+=2
#===================================================================

#===================================================================
#Zadatak  16
# Задатак: Троугао од речи
# Напиши програм који исцртава троугао чије су ивице састављене од карактера дате речи. Реч се добија читањем слова са леве и десне ивице троугла наниже, док се на доњој ивици налази палиндром чија је десна
# половина та дата реч.
# Улаз: Са стандардног улаза се учитава реч дужине између 3 и 20 карактера.
# Излаз: На стандардни излаз исписати тражени троугао.
# Пример
# Улаз
# bravo
# Излаз
#     b
#    r r
#   a   a
#  v     v
# ovarbravo
# rec=input('neka rec cu da placem ')
# i=0
# mm=0
# n=len(rec)
# raz=n-1
# for g in range(n):
#     if mm==0:
#         print((' ')*raz+rec[i])
#     elif rec[i]==rec[-1]:
#         print(rec[n-1:0:-1]+rec[0:n])
#     else:
#         print((' ')*raz+rec[i]+(' ')*mm+rec[i])
#     i+=1
#     raz-=1
#     mm+=2
#===================================================================

#===================================================================
#Zadatak  17
# Задатак: Ромб од звездица
# Напиши програм који исписује ромб направљен од звездица (како је приказано у примеру).
# Улаз: Са стандардног улаза се уноси природан број n (3 ≤ n ≤ 20), који представља димензију ромба (број
# врста и колона).
# Излаз: На стандардни излаз исцртати ромб.
# Пример
# Улаз
# 5
# Излаз
#     *****
#    *****
#   *****
#  *****
# *****

# n=int(input('broj redova standa '))
# raz=n-1
# for i in range(n):
#     print((' ')*raz+('*')*n)
#     raz-=1
#===================================================================

#===================================================================
#Zadatak  18
# Задатак: Ћилим од звездица
# Напиши програм који који исцртава ћилим састављен од звездица (квадрат из чије је средине уклоњен ромб,
# како је приказано у примерима).
# Улаз: Са стандардног улаза се учитава број n (1 ≤ n ≤ 20).
# Излаз: На стандардни излаз исписати ћилим.
# Пример 1
# Улаз
# 3
# Излаз
# ******
# **  **
# *    *
# **  **
# ******
# Пример 2
# Улаз
# 4
# Излаз
# ********
# ***  ***
# **    **
# *      *
# **    **
# ***  ***
# ********

# n=int(input(' romic '))
# raz=2
# zve=n-1
# print("*"*(n*2))
# while zve>1:
#     print(zve*"*"+raz*" "+zve*'*')
#     raz+=2
#     zve-=1
# while zve<n:
#     print(zve*"*"+raz*" "+zve*'*')
#     raz-=2
#     zve+=1
# print("*"*(n*2))
#===================================================================

#===================================================================
#Zadatak  19
# Задатак: V од звездица
# Напиши програм који који исцртава латиничко слово V састављено од звездица. Слово се простгире у n
# редова и n колона.
# Улаз: Са стандардног улаза се учитава број n (1 ≤ n ≤ 20).
# Излаз: На стандардни излаз исписати звездице, као у примерима.
# Пример 1
# Улаз
# 3
# Излаз
# * *
# * *
# * *
# * *
# **
# **
# Пример 2
# Улаз
# 4
# Излаз
# * *
# * *
# * *
# * *
# * *
# * *
# **
# **
# n=int(input('broj brojeva ili tako nesto '))
# pre=0
# raz=(n-1)*2
# for i in range(n):
#     print((" "*pre)+"*"+(raz*" ")+"*")
#     print(" "*pre+"*"+(raz*" ")+"*")
#     pre+=1
#     raz-=2
#===================================================================


#===================================================================
#Zadatak  20
# 4.3.4 Генерисање неких правилних серија
# Задатак: Карирана застава
# На часу ликовног ђаци су добили задатак да за предстојећу трку око центра града, од већ постојећих квадратних комада старих застава, направе правоугаону заставу димензија која ће, као што је на аутомобилским
# тркама обичај бити карирана, црно-бела. Након завршеног шивења, видели су да им није баш све ишло од
# руке. Циљ који треба да постигну је да ниједно црно поље нема за суседно бело, и обрнуто (суседна поља су
# лево, десно, горње и доње) и зато морају још да префарбају поља заставе која нису ваљана са што мање боје.
# Напиши програм који одређује колико најмање поља морају да офарбају.
# Улаз: У првој линији улаза налазе се два цела броја одвојена размаком r и k (1 ≤ r, k ≤ 3000), број редова
# и број колона заставе. Следећих r редова садржи по k знакова C или B (без размака).
# Излаз: У једини ред излаза треба исписати један цео број који представља минималан број квадратних
# делова заставе које је потребно префарбати да би се добила црно бела карирана застава.
# Пример 1
# Улаз
# 3 3
# CCC
# CCC
# CCC
# Излаз
# 4
# Пример 2
# Улаз
# 3 4
# CBCB
# BCBC
# CBCB
# Излаз
# 0
# Пример 3
# Улаз
# 4 2
# BC
# BC
# CB
# BC
# Излаз
# 2

# (r, k) = map(int, input().split())
# m = 0
# for i in range(r):
# str = input()
# for j in range(k):
# if str[j] == 'B' and (i + j) % 2 == 0:
# m += 1
# if str[j] == 'C' and(i + j) % 2 != 0:
# m += 1
# print(min(r * k - m, m))
#=================================================================

#===================================================================
#Zadatak  21
# Задатак: Серије 123
# За дато n исписати чланове низа 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, . . . , n, . . . , n (низ садржи једну јединицу, две двојке,
# три тројке итд.).
# Улаз: Са стандардног улаза се учитава природан број n (1 ≤ n ≤ 30).
# Излаз: Чланове траженог низа исписати на стандардни излаз (иза сваког исписати један размак).
# Пример
# Улаз
# 4
# Излаз
# 1 2 2 3 3 3 4 4 4 4
# n=int(input('broj sa kojeg zelis da brojis '))
# for i in range(1,n+1):
#     g=i
#     while g>0:
#         print(i,' ',end="")
#         g-=1
#===================================================================

#===================================================================
#Zadatak  22
# Задатак: Таблица множења
# Напиши програм који исписује таблицу множења.
# Улаз: Са стандардног улаза се уносе два цела броја m и n (1 ≤ m, n ≤ 9), сваки у посебном реду.
# Излаз: На стандардни излаз исписати таблицу множења са m врста и n колона, како је приказано у примеру.
# Између колона штампати табулатор (карактер Tab).
# Пример
# Улаз
# 5
# 5
# Излаз
# 1 * 1 = 1 1 * 2 = 2 1 * 3 = 3 1 * 4 = 4 1 * 5 = 5
# 2 * 1 = 2 2 * 2 = 4 2 * 3 = 6 2 * 4 = 8 2 * 5 = 10
# 3 * 1 = 3 3 * 2 = 6 3 * 3 = 9 3 * 4 = 12 3 * 5 = 15
# 4 * 1 = 4 4 * 2 = 8 4 * 3 = 12 4 * 4 = 16 4 * 5 = 20
# 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25

# n=int(input('brojevi koji ce biti mnozeni '))
# m=int(input('brojevi do koje ce se mnoziti '))
# for br in range(1,n+1):
#     for ope in range(1,m+1):
#         print(br,'*',ope,'=',br*ope,' ',end="")
#===================================================================


#===================================================================
#Zadatak  23
# Задатак: Серије непарни парни
# За дато n исписати елементе низа 1, 2, 4, 5, 7, 9, 10, 12, 14, 16, 17, … који се формира тако што се полазећи
# од броја 1 – приказује један непаран природни број, затим следећа два парна – 2, 4; па следећа 3 непарна –
# 5, 7, 9; следећа 4 парна – 10, 12, 14, 16, … итд. Последња серија садржи n елемената.
# Улаз: Са стандардног улаза се учитава природан број n у границама од 1 до 40.
# Излаз: На стандардни излаз исписати елементе траженог низа, сваку подсерију у посебном реду, при чему
# се иза сваког броја исписује један размак.
# Пример
# Улаз
# 5
# Излаз
# 1
# 2 4
# 5 7 9
# 10 12 14 16
# 17 19 21 23 25
n = int(input("redovi: "))
broj = 1  # ovo je brojač koji se neprekidno povećava
for i in range(1, n + 1):
    ispisano = 0  # broj brojeva ispisanih u ovom redu
    while ispisano < i:
        if (i % 2 == 1 and broj % 2 == 1) or (i % 2 == 0 and broj % 2 == 0):
            print(broj, end=" ")
            ispisano += 1
        broj += 1
    print()
#===================================================================








    
    
    