#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May  7 12:45:40 2025

@author: alex
"""

def ispisati(x):
    print("#===================================================================")
    print("#Zadatak ", x)
    
    
    print("#===================================================================")
    

#===================================================================
#Zadatak  1
#Написати функцију која за целобројну вредност секунде претвара у формат -сати:минути:секунди за негативне, односно сати:минути:секунди за ненегативне улазе
# def pretvori(sekunde):
#     sek=sekunde
#     sekunde=abs(sekunde)
#     s=sekunde%60
#     sekunde//=60
#     m=sekunde%60
#     sekunde//=60
#     h=sekunde%24
#     if sek<0:
#         return f'-{h}:{m:02}:{s:02}'
#     else:
#         return f'{h}:{m:02}:{s:02}'
#===================================================================

#===================================================================
#Zadatak  2
#Написати функцију која враћа члан низа који фали. Низ је дужине н, и садржи бројеве у опсегу [0,н].

# def fali(niz):
#     niz.sort()
#     for i in range(len(niz)):
#         if i!=niz[i]:
#             return i
#===================================================================

#===================================================================
#Zadatak  3
#Написати функциjу коjа прима природан броj n и цифру c (коjа jе природан броj мањи од десет), 
#а враћа броj поjављивања цифре c у природном броjу n.
# def rekfic(broj,cifra):
#     if broj==cifra:
#         return 1
#     elif broj<10:
#         return 0
#     else:
#         return rekfic(broj%10,cifra)+rekfic(broj//10,cifra)
    
# iterativno bi bilo ici kroz while petlju dok je broj veci od 0 i ako nadje na cifru i+=1
#===================================================================

#===================================================================
#Zadatak  4
#Написати функциjу коjа за унети природан броj рачуна следећи поткорени израз (у примеру jе ’унети’ броj 5):
# from math import sqrt
# def rekkoren(broj,i=1):
#    if broj==i:
#         return sqrt(broj)
#    else:
#         return  sqrt(i+rekkoren(broj,i+1))
    
    
# def iterkoren(broj):
#     koren=sqrt(broj)
    
#     while broj>1:
#         broj-=1
#         koren=sqrt(broj+koren)
        
#     print(koren)
#===================================================================

#===================================================================
#Zadatak  5
#Написати функцију која проверава да ли је редослед заграда ваљан.
# def valjanost(niska):
#     l,d=0,0
#     for zagrada in niska:
#         if zagrada=='(' and d==0:
#             l+=1
#         elif zagrada==')' and l>0:
#             d+=1
#         elif zagrada=='(':   
#             if l!=d:
#                 return False
#             else:
#                 l,d=1,0
#                 continue 
#         elif zagrada==')':
#             return False
#     return l==d
#===================================================================

#===================================================================
#Zadatak  6
#Написати функцију која враћа максималан члан у низу који се појављује непаран број пута.

# def maks(niz):
#     niz=sorted(niz,reverse=True)
#     for i in niz:
#         if niz.count(i)%2!=0:
#             return i 
#===================================================================


#===================================================================
#Zadatak  7
#Написати функцију која враћа име контакта који у свом броју има део броја који укуцамо.
 # Уколико има више таквих контакта, вратити оног са најмањом алфабетском вредношћу. 
 # Уколико нема ни једног, вратити “NO CONTACT”.
# def konakt(kontakti,brojevi,broj):
#     imaju=[]
#     for i in brojevi:
#         if broj in i:
#             imaju.append(kontakti[i])
#     for g in range(len(imaju)-1):
#         if not g[i]<g[i+1]:
#             return g[i]
 #    return print('no kontatko')
#===================================================================

#===================================================================
#Zadatak  8
#Написати функцију која, за унете границе, враћа низ бројева у оквиру тих граница који су дељиви са
#свим својим цифрама.
# def granica(g1,g2):
#     jeste=[]
#     for i in range(g1,g2):
#         cifra=0
#         broj=i
#         while broj>0:
#             cifra=broj%10
#             if cifra==0 or i%cifra!=0:
#                 break 
            
#             broj=broj//10
#         else:
#             jeste.append(i)
            
#     return jeste
#===================================================================


#===================================================================
#Zadatak  9
# Написати функцију низ са парним бројем чланова групише у парове, тако да је збир минимуа тих парова 
# максималан, и вратити тај максимум.
# def minimilac(niz):
#     niz.sort()
#     parovi=[]
#     najmanji=[]
#     for i in range(0,len(niz),2):
#         parovi.append([niz[i],niz[i+1]])
#     for m in parovi:
#         najmanji.append(min(m))
#     return sum(najmanji)
#===================================================================


#===================================================================
#Zadatak  10
#Написати функцију која прима низ цена бомбона, одредити колико новца би требало да потрошимо да купимо
# све из низа, ако на сваке две купљене бомбоне трећу добијамо гратис. Купац може изабрати коју год хоће
 # гратис само ако цена треће није мања од миминалне цене претходне две купљене бомбоне.

# def cene(niz):
#     suma=0
#     while True:
#         try:
#             for i in range(0,len(niz),3):
#                 if niz[i]<niz[i-1] and niz[i-2]:
#                     suma+=niz[i]
#             break
#         except:
#             break 
#     return sum(niz)-suma
#===================================================================

#===================================================================
#Zadatak  11
# #Написати функцију која за сортиран низ јединствених елемената налази индекс на који би требало ставити 
# #број уколико не постоји. Уколико је број у низу, вратити индекс на ком се налази тај број.
# def zadatak(niz,broj):
#     niz.sort()
#     if broj in niz:
#         return niz.index(broj)
#     for i in range(len(niz)-1):
#         if niz[i]<broj<niz[i+1]:
#             return i+1 
#     if min(niz)>broj:
#         return 0
#     elif max(niz)<broj:
#         return len(niz)
#===================================================================
 
#===================================================================
#Zadatak  12
#Написати функцију која прима низ који садржи цифре броја, у подразумеваном редоследу.
# Инкрементовати број за један, и вратити низ цифара.
# def inkrementacija(niz):
#     broj=niz[0]
#     niz.pop(niz[0])
#     novi=[]
#     while len(niz)>0:
#         broj=broj*10+niz[0]
#         niz.pop(0)
#     broj+=1 
#     while broj>0:
#         cifra=broj%10
#         novi.append(cifra)
#         broj//=10
#     return novi[::-1]
#===================================================================

#===================================================================
#Zadatak  13
# Написати програм за скраћивање ниске. Ниска се скраћује тако што се једнаки узастопни знаковни
# симболи у ниски замењују једним знаковним симболом након којег следи број понављања тог симбола. На пример ааа се мења са а3.

# Опис улаза
# У једном реду стандардног улаза се налази ниска коју је потребно скратити.

# Опис излаза
# У једном реду стандарног излаза се налази скраћена верзија улазне ниске.

# Пример 1
# Улаз
# aaabbccc
# Излаз
# a3b2c3
# Пример 2
# Улаз
# abc
# Излаз
# abc
# niska = input()

# ako_ima = ""
# broj = 1

# for i in range(1, len(niska)):
#     if niska[i] == niska[i - 1]:
#         broj += 1
#     else:
#         ako_ima += niska[i - 1] + (str(broj) if broj > 1 else "")
#         broj = 1


# ako_ima += niska[-1] + (str(broj) if broj > 1 else "")

# print(ako_ima)
#===================================================================


























