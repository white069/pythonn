#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May  9 13:34:13 2025

@author: alex
"""

def ispisati(x):
    print("#===================================================================")
    print("#Zadatak ", x)
    
    
    print("#===================================================================")
    
    
#===================================================================
#Zadatak  1  ili 36 po redu
# Задатак: Друга вредност по величини
# У студентском удружењу се организује наградна игра. Договор је да награде добијају два члана удружења
# која имају највеће бројеве индекса. Проблем је у томе што су на постојећем списку неки студенти уписани
# и више пута. Написати програм који на основу серије бројева индекса са тог списка одређује два награђена
# студента.
# Улаз: Прва линија стандардног улаза садржи природан број N (10 ≤ N ≤ 50000) који представља број
# студената на списку. Свака од наредних N линија садржи по један природан број из интервала [1, 50000],
# који представља број индекса студената из удружења. Може се претпоставити да ће на списку постојати бар
# два различита индекса.
# Излаз: На стандардном излазу приказати индексе два награђена студента. У првом реду највећу, а у другом
# реду следећу по величини вредност међу бројевима индекса.
# Пример
# Улаз
# 5
# 22
# 35
# 71
# 71
# 22
# Излаз
# 71
# 35
# n=int(input('koliko ima ucenika na spisku '))
# indeksi=[int(input('indeks')) for i in range(n)]
# indeksi.sort()
# print(indeksi[-1])
# broj=-2
# while abs(broj)<len(indeksi):
#     if indeksi[-1]!=indeksi[broj]:
#         print(indeksi[broj])
#         break
#     broj-=1
#===================================================================  
    
#===================================================================
#Zadatak  2
# Задатак: Победник у три дисциплине
# Такмичари су радили тестове из програмирања, математике и физике. За сваки предмет добили су одређени
# број поена (цео број од 0 до 50). Такмичари се рангирају по укупном броју поена из сва три предмета. Ако
# два такмичара имају исти број поена, победник је онај који има више поена из програмирања. Ако је и
# број поена из програмирања једнак, онда се посматра број поена из математике. На крају, ако је и број
# поена из математике једнак, посматра се број поена из физике. Потребно је написати програм који одређује
# победника такмичења.
# Улаз: Учитава се прво број такмичара, а затим и подаци за сваког такмичара. За сваког такмичара учитава
# се број поена из програмирања, а затим број поена из математике, и на крају број поена из физике, сви у
# истом реду.
# Излаз: Потребно је исписати редни број победника и број његових поена из сваког предмета. Бројање
# такмичара почиње од 1. Ако су два или више такмичара остварила потпуно идентичан успех, победник је
# онај који има мањи редни број (јер је остварио више поена на квалификационом такмичењу).
# Пример
# Улаз
# 4
# 20 30 40
# 10 20 30
# 20 40 30
# 10 50 20
# Излаз
# 3: 20 40 30

# n=int(input('broj takmicara '))
# prog,mat,fiz=map(int,input('broj poena iz programiranja, matematike i fizike ').split())
#ukupno=prog+mat+fiz
# najbolji=1
# i=1
# predmeti=prog,mat,fiz
# for _ in range(1,n):
#     i+=1
#     prog1,mat1,fiz1=map(int,input('broj poena iz programiranja, matematike i fizike ').split())
#     ukupno1=prog1+mat1+fiz1
#     if (ukupno1,prog1,mat1,fiz1)>(ukupno,prog,mat,fiz):
#         ukupno=ukupno1; prog,mat,fiz=prog1,mat1,fiz1
#         najbolji=i
#         predmeti=prog1,mat1,fiz1
# print(najbolji,':',predmeti[0],' ',predmeti[1],' ',predmeti[2])
#===================================================================

#===================================================================
#Zadatak  3
# Задатак: Најмањи круг
# За дати низ тачака у равни одредити полупречник најмањег круга, са центром у координатном почетку, који
# садржи све дате тачке.
# Улаз: Са стандардног улаза у првој линији се уноси природан број n (1 ≤ n ≤ 100) који представља број
# тачака у равни, а у наредних n линија у свакој линији по два реалана броја (од −1000 до 1000), који представљају координате x и y тачке у равни.
# Излаз: На стандардни излаз исписати један реалан број (допуштена је толеранција грешке 10−5
# ) - полупречник најмањег круга са центром у координатном почетку, који садржи све учитане тачке.
# Пример
# Улаз
# 4
# 2.6 3.4
# 1.2 6.7
# 3.33 5.55
# 2.57 3.44
# Излаз
# 6.80661
# from math import sqrt
# n=int(input('broj tacaka '))
# maks=0
# for _ in range(n):
#     x,y=map(float,input('x i y ').split())
#     r=sqrt(x**2+y**2)
#     if r>=maks:
#         maks=r 
# print(f'{maks:.5f}')
#===================================================================  
    
#===================================================================
#Zadatak  4
# Задатак: Редни број максимума
# На аукцији неке слике учествује n купаца. Сваки купац је понудио извесни износ новца и сви купци су
# понудили различите износе. Написати програм којим се одређује редни број купца који је понудио највећи
# износ.
# Улаз: Прва линија стандарног улаза садржи природан број n (1 ≤ n ≤ 1000) који представља број купаца.
# У наредних n линија налази се по један позитиван реалан број, ти бројеви представљају износе новца коју
# су понудио купци редом.
# Излаз: У првој линији стандарног излаза приказати редни број купца који је понудио највећи износ новца.
# Пример
# Улаз
# 5
# 123.23
# 234.45
# 100.23
# 345.00
# 128.80
# Излаз
# 4

# n=int(input('broj kupaca '))
# i=1
# najbolji=0
# ii=0
# for _ in range(n):
#     svota=float(input('koliko money money baja ima '))
#     if svota>najbolji:
#         ii=i 
#         najbolji=svota 
#     i+=1
# print(ii)
#===================================================================  
    
#===================================================================
#Zadatak  5
# Задатак: Негативан број
# Написати програм којим се проверава да ли међу учитаним бројевима постоји негативан број.
# Улаз: Прва линија стандарног улаза садржи природан број n (1 ≤ n ≤ 100) који представља број бројева.
# Свака од наредних n линија садржи по један реалан број.
# Излаз: На стандарном излазу у једној линији исписти da ако међу учитаним бројевима постоји негативан
# број, иначе исписати ne.
# Пример 1
# Улаз
# 5
# 10.89
# 12.349
# -5.9
# 2.3
# -2.45
# Излаз
# da
# Пример 2
# Улаз
# 4
# 100.89
# 12.349
# 0
# 2.3
# Излаз
# ne
# Решење
# Коришћење логичке променљиве

# n=int(input('koliko brojevcica '))
# da=False 
# for _ in range(n):
#     broj=float(input('broj '))
#     if broj<0:
#         da=True 
# if da:
#     print('da')
# else:
#     print('ne')
#===================================================================   
    
#===================================================================
#Zadatak  6
# Задатак: Дељив бројевима од 1 до n
# Написати програм којим се проверава да ли је дати природан број k дељив свим природним бројевима од 1
# до n.
# Улаз: Прва линија стандардног улаза садржи природан број k (0 < k ≤ 109
# ), а друга линија садржи природан
# број n (1 ≤ n ≤ 10).
# Излаз: У првој линији стандардног излаза приказати реч da ако је број k дељив свим природним бројевима
# од 1 до n, иначе приказати реч ne.
# Пример 1
# Улаз
# 60
# 6
# Излаз
# da
# Пример 2
# Улаз
# 90
# 5
# Излаз
# ne

# k=int(input('broj sa kojeg gledamo deljivost '))
# n=int(input('opeg brojeva '))
# deli=True
# for i in range(1,n+1):
#     if k%i!=0:
#         deli=False
# print(('da'if deli else 'ne'))
#===================================================================   
    
#===================================================================
#Zadatak  7
# Задатак: Прва негативна температура
# Познате су температуре за сваки дан неког периода. Написати програм којим се одређује редни број дана у
# том периоду када је температура први пут била негативна.
# Улаз: Прва линија стандарног улаза садржи природан број n (3 ≤ n ≤ 365) који представља број дана
# периода. Свака од наредних n линија садржи по један цео број из интервала [−5, 40], бројеви представљају
# температуре редом за n дана периода.
# Излаз: У првој линији стандарног излаза приказати редни број дана периода када је температура први пут
# била негативна (дани се броје од 1 до n), ако такав дан не постоји приказати -1.
# Пример 1
# Улаз
# 5
# 12
# 10
# -2
# -3
# 4
# Излаз
# 3
# Пример 2
# Улаз
# 3
# 12
# 10
# 14
# Излаз
# -1
# n=int(input('broj dana '))
# i=1 
# for _ in range(n):
#     broj=int(input('temperatura dana '))
#     if broj>0:
#         i+=1
#     elif broj<0:
#         break 
# print((i if i-1!=n else -1))
#===================================================================    
    
#===================================================================
#Zadatak  8                              pogresno sam shvatio zadatak, ali pravo resenje je ezzz 
# Задатак: Последња негативна температура
# Познате су температуре за сваки дан неког периода. Написати програм којим се одређује редни број дана у
# том периоду када је температура последњи пут била негативна (дани се броје од 1 до n).
# Улаз: Прва линија стандардног улаза садржи природан број n (3 ≤ n ≤ 365) који представља број дана
# периода. Свака од наредних n линија садржи по један цео број из интервала [−10, 40], бројеви представљају
# температуре редом за n дана периода.
# Излаз: У првој линији стандардног излаза приказати редни број дана периода када је температура последњи
# пут била негативна, ако такав дан не постоји приказати -1.
# Пример 1
# Улаз
# 5
# 2
# -8
# -2
# -3
# 4
# Излаз
# 4
# Пример 2
# Улаз
# 3
# 12
# 10
# 14
# Излаз
# -1
# n=int(input('broj dana '))
# dani=[int(input('temperatura dana ')) for _ in range(n)]
# g=1
# dani=dani[::-1]
# for i in dani:
#     if i<0:
#         g+=1
#     elif i>0 and g!=1:
#         break 
# print(g if g>1 else -1)
#=================================================================== 
    
#===================================================================
#Zadatak  9
# Задатак: Парно непарни
# Пера се игра картама. Све карте које је имао у руци је сложио тако да прво иду све карте са парним бројевима,
# а затим оне са непарним бројевима (могуће је и да је Пера имао само парне или само непарне карте). Напиши
# програм који проверава да ли је Пера исправно сложио карте.
# Улаз: Са стандардног улаза учитавају се бројеви карата (природни бројеви између 2 и 10) све док се не дође
# до краја улаза (он се може унети са Ctrl+Z тј. Ctrl+D). Карата има најмање две, а највише десет.
# Излаз: На стандардни излаз исписати da ако је Пера добро сложио карте тј. ne у супротном.
# Пример 1
# Улаз
# 2
# 6
# 4
# 5
# 3
# Излаз
# da
# Пример 2
# Улаз
# 2
# 6
# 3
# 5
# 4
# Излаз
# ne

# tacno=True 
# jedanp=False
# try:
#     while True:
#         broj=int(input('unesi broj '))
#         if broj%2!=0 and jedanp==False:
#             jedanp=True
#         elif broj%2==0 and jedanp==True:
#             tacno=False 
# except:
#     pass
# print('da' if tacno else 'ne')
#===================================================================    
    
#===================================================================
#Zadatak  10
# Задатак: Први и последњи приступ
# Са рачунара у школи на сајт школе се логују разни ђаци. Сваки пут када се неко улогује то се памти у бази.
# Напиши програм који за дати број рачунара одређује који је први, а који је последњи ђак који се логовао.
# Улаз: Са стандардног улаза се у првој линији уноси редни број рачунара који нас занима (цео број од 1 до
# 100), у другој линији се налази укупан број n (1 ≤ n ≤ 50000) логовања, а затим се у наредних n линија
# налазе подаци о појединачним логовањима: број рачунара са којег се неки ђак логовао (цео број од 1 до 100)
# и корисничко име тог ђака (ниска од највише 20 малих слова енглеске абецеде).
# Излаз: На стандардни излаз исписати име првог и име последњег ђака који се логовао на тај рачунар (свако
# у посебном реду) или текст nema ако се са тог рачунара нико није логовао.
# Пример
# Улаз
# 3
# 5
# 1 zika
# 3 jovana
# 2 ana
# 3 pera
# 3 milica
# Излаз
# jovana
# milica

# racunar=input('racunar koji nas zanima logovanje')
# logovanja=int(input('broj logovanja '))
# prvi=''
# drugi=''
# for i in range(logovanja):
#     rac, acc=map(str,input('racunar i nalog ').split())
#     if racunar==rac:
#         if prvi=='':
#             prvi=acc
#         elif len(prvi)>0:
#             drugi=acc 
# print(prvi)
# print(drugi)
#===================================================================   
    
#===================================================================
#Zadatak  11
# Задатак: Провера тробојке
# Напиши програм који проверава да ли су бројеви који се уносе уређени тако да прво иду негативни, затим
# нуле и на крају позитивни бројеви (могуће је и да било којих од наведених бројева нема).
# Улаз: Са стандардног улаза се уноси број бројева n (1 ≤ n ≤ 20), а након тога и сами бројеви, сваки у
# посебном реду.
# Излаз: На стандардни излаз исписати da ако су бројеви уређени како је наведено тј. ne у супротном.
# Пример
# Улаз
# 5
# -3
# -1
# 0
# 4
# 2
# Излаз
# da

# l=int(input('broj brojeva '))
# negativni=True
# nula=True 
# pozitivni=True
# n=0;o=0;p=0;
# for _ in range(l):
#     broj=int(input('broj '))
#     if broj<0 and n==0:
#         n=1 
#     elif broj==0 and o==0:
#         o=1 
#     elif broj>0 and p==0:
#         p=1 
#     elif broj<0 and (o==1 or p==1):
#         negativni=False
#     elif broj==0 and (p==1 or n==0):
#         nula=False
#     elif broj>0 and (n==0 or o==0):
#         pozitivni=False 
# print('da' if negativni and nula and pozitivni else 'ne')
#===================================================================   
    
#===================================================================
#Zadatak  12
# Задатак: Број и збир цифара броја
# Написати програм којим се одређује број и збир цифара декадног записа природног броја.
# Улаз: Са стандардног улаза се учитава цео број од 0 до 1000000000.
# Излаз: На стандардни излаз се исписују број цифара и збир цифара учитаног броја.
# Пример 1
# Улаз
# 23645
# Излаз
# 5 20
# Пример 2
# Улаз
# 0
# Излаз
# 1 0
# broj=input('unesi broj ')
# suma=0
# for cifra in broj:
#     suma+=int(cifra)
# print(len(broj),suma)
#===================================================================
    

#===================================================================
#Zadatak  13
# Задатак: Да ли запис броја садржи цифру
# Написати програм којим се испитује да ли декадни запис природног броја садржи дату цифру?
# Улаз: У првој линији стандардног улаза уноси се природан број од 0 до 1000000000, а у другој декадна
# цифра.
# Излаз: На стандардни излаз се исписује текстуални одговор, облика који је приказан у наредним примерима.
# Пример 1
# Улаз
# 29384
# 3
# Излаз
# broj 29384 sadrzi cifru 3
# Пример 2
# Улаз
# 29384
# 7
# Излаз
# broj 29384 ne sadrzi cifru 7

# broj=input('broj zeljeni ')
# cifra=input('cifta trazena ')
# sadrzi=False 
# for i in broj:
#     if i==cifra:
#         sadrzi=True 
# print((f'broj {broj} sadrzi cifru {cifra}' if sadrzi else f'broj {broj} ne sadrzi cifru {cifra}'))
#===================================================================   

#===================================================================
#Zadatak  14
# Задатак: Различите цифре
# Написати програм којим се испитује да ли су све цифре у декадном запису датог природног броја различите?
# Улаз: Са стандардног улаза уноси се природан број од 0 до 2 · 109
# .
# Излаз: На стандардном излазу исписује се текстуални одговор DA или NE.
# Пример 1
# Улаз
# 67569
# Излаз
# NE
# Пример 2
# Улаз
# 1234567890
# Излаз
# DA

# broj=input('broj sa ciframa valjda nzm fam ')
# cifre=set()
# razlicite=True 
# for cifra in broj:
#     if cifra not in cifre:
#         cifre.add(cifra)
#     else:
#         razlicite=False
# print(('daaaa ' if razlicite else 'THUNG THUNG THUNG SAHUR '))
#===================================================================


#===================================================================
#Zadatak  15
# Задатак: Армстронгов број
# Написати програм који за дати природан број n проверава да ли је тај број Армстронгов. k-то цифрен број
# је Армстронгов ако је једнак суми k-тих степена својих цифара. На пример, 370 је Армстронгов јер је
# 370 = 33 + 73 + 03
# , 1634 је Армстронгов јер је 1634 = 14 + 64 + 34 + 44
# , док 12 није Армстронгов јер је
# 12 ̸= 12 + 22
# .
# Улаз: Са стандардног улаза се учитава природан број n (1 ≤ n ≤ 100000).
# Излаз: На стандардном излазу исписују се порука DA ако учитан број јесте Армстронгов, тј. NE ако учитан
# број није Армстронгов.
# Пример 1
# Улаз
# 1002
# Излаз
# NE
# Пример 2
# Улаз
# 370
# Излаз
# DA

# broj=input('neki broj ')
# stepen=len(broj)
# suma=0
# for cifra in broj:
#     suma+=int(cifra)**stepen
# print(('yeah : )' if suma==int(broj) else 'bombardilo crocodilo '))
#===================================================================

#===================================================================
#Zadatak  16
# Задатак: Трансформација броја у производ цифара
# Природан број се трансформише тако што се замени производом својих цифара. Написати програм којим се
# исписују све трансформације броја док се не добије једноцифрен број. Одредити и колико трансформација
# је при томе потребно извршити.
# Улаз: Једна линија стандардног улаза садржи један природан број.
# Излаз: На стандардном излазу приказати у свакој линији по једну трансформацију датог броја (природан
# број), до једноцифреног броја. У последњој линији стандардног излаза приказати број трансформација.
# Пример 1
# Улаз
# 3274
# Излаз
# 168
# 48
# 32
# 6
# 4
# Пример 2
# Улаз
# 5
# Излаз
# 0
# def transformacija(broj):
#     if broj<10:
#         return 0
#     else:
#         suma=1
#         broj=str(broj)
#         for cifra in broj:
#             suma=suma*int(cifra)
#         suma=int(suma)
#         print(suma)
        
#         return  1+transformacija(suma)
# broj=int(input('broj'))
# print(transformacija(broj))
#===================================================================


#===================================================================
#Zadatak  17
# Задатак: Најмањи број са највећим збиром парних цифара
# Уносе се природни бројеви (укључујући и 0) док се не унесе -1. Међу унетим бројевима који садрже бар
# једну парну цифру, наћи најмањи број са највећим збиром парних цифара.
# Улаз: Линије стандардног улаза, њих највише милион, садрже по један природан број. Последња линија
# стандардног улаза садржи број -1.
# Излаз: Прва и једина линија стандардног излаза садржи најмањи број од унетих бројева са највећим збиром
# парних цифара. Ако међу унетим бројевима нема оних који садрже парне цифре, на излазу приказати -1.
# Пример 1
# Улаз
# 137
# 20
# 143
# 221
# 0
# 22
# 4
# -1
# Излаз
# 4
# Пример 2
# Улаз
# 137
# 39
# 155
# 791
# 731
# 31
# -1
# Излаз
# -1
# bro=0
# suma=0
# while True:
#     broj=input('unesi broj')
#     if broj=='-1':
#         break
#     trenutnas=0
#     for i in broj:
#         if int(i)%2==0:
#             trenutnas+=int(i)
#     if trenutnas>suma:
#         suma=trenutnas
#         bro=broj
        
#     elif trenutnas==suma and int(broj)<int(bro):
#         bro=broj 
        
# print((bro if bro else -1))
#===================================================================

#===================================================================
#Zadatak  18
# Задатак: Број формиран од датих цифра с лева на десно
# Написати програм којим се формира природан број од учитаних цифара, ако се цифре броја учитавају слева
# на десно (редом од цифре највеће тежине до цифре јединица).
# Улаз: Свака линија стандарног улаза, њих највише 9, садржи по једну цифру.
# Излаз: На стандарном излазу приказати формирани број.
# Пример
# Улаз
# 4
# 1
# 0
# 9
# Излаз
# 4109
# suma=0 
# try:
#     while True:
#         cifra=int(input('unesi cifru'))
#         suma=suma*10+cifra
# except:
#     pass
# print(suma)
# import sys
# n=0
# for linija in sys.stdin:
#     cifra=int(input())
#     n=n*10+cifra
# print(n)
#===================================================================

#===================================================================
#Zadatak  19
# Задатак: Број формиран од датих цифара здесна на лево
# Написати програм којим се формира природан број од учитаних цифара, ако се цифре броја учитавају здесна
# на лево (редом од цифре јединица до цифре највеће тежине).
# Улаз: Свака линија стандардног улаза (њих највише 9) садржи по једну цифру.
# Излаз: На стандардном излазу приказати формирани број.
# Пример
# Улаз
# 0
# 0
# 3
# 2
# 9
# Излаз
# 92300
# suma=''
# try:
#     while True:
#         cifra=input('cifra sine ')
#         suma+=cifra
# except:
#     pass
# print(suma[::-1])
#===================================================================

#===================================================================
#Zadatak  20
# Задатак: Замени цифре 0 са 5
# Написати програм који у датом природном броју свако појављивање цифре 0 замењује цифром 5.
# Улаз: Са стандардног улаза се учитава природан број у границама од 0 до 1000000000.
# Излаз: На стандардном излазу се исписује добијени број.
# Пример
# Улаз
# 20240607
# Излаз
# 25245657
# suma=''
# broj=input()
# for cifra in broj :
#     if cifra=='0':
#         cifra='5'
#     suma+=cifra 
# print(suma)
#===================================================================

#===================================================================
#Zadatak  21                                     uopste nisam ukapirao sta sam trebao da radim
# Задатак: Децимале броја 1/n
# Одреди првих k децималних цифара вредности 1
# n
# за дати позитиван природан број n. Претпоставити да се
# након k децимала врши одсецање тј. да се број заокружује наниже.
# Улаз: Прва линија стандардног улаза садржи природан број k (1 ≤ k ≤ 1000) а друга природан број n
# (2 ≤ n ≤ 1000).
# Излаз: На стандардном излазу, приказујемо количник са траженим бројем децимала (потребно је употребити децималну запету, а не децималну тачку).
# Пример
# Улаз
# 4
# 33
# Излаз
# 0,0303
# k = int(input())  # broj decimala
# n = int(input())  # imenilac

# print("0,", end="")  # jer je rezultat manji od 1

# broj = 1  # početni deljenik je 1 (jer delimo 1 sa n)

# for _ in range(k):
#     print((10 * broj) // n, end="")  # decimalna cifra
#     broj = (10 * broj) % n  # ostatak za sledeći krug
#===================================================================

#===================================================================
#Zadatak  22                             ista stvar
# Задатак: K децимала у бинарном запису
# Написати програм којим се исписује k децимала бинарног записа реаланог броја x (0 ≤ x < 1) .
# Улаз: Прва линија стандардног улаза садржи реалан број из интервала [0,1). Друга линија стандардног улаза
# садржи природни број k (1 ≤ k ≤ 100).
# Излаз: У првој и јединој линији стандардног излаза приказати бинарни запис броја x, заокружен на k децимала.
# Пример
# Улаз
# 0.8
# 4
# Излаз
# 0.1100

# x=float(input('binarni zapis broja '))
# k=int(input('broj ponavljanja '))
# broj=1
# print('0.',end="")
# for i in range(k):
#     x=2*x
#     print(int(x),end="")
#     x=x-int(x)
#===================================================================

#===================================================================
#Zadatak  23
# Задатак: Бројеви који не садрже цифру 5
# Напиши програм који одређује колико бројева на стандардном улазу не садржи цифру 5.
# Улаз: Свака линија стандардног улаза садржи један природан број из интервала [0, 1000000000].
# Излаз: На стандардни излаз исписати колико од учитаних бројева не садржи цифру 5.
# Пример
# Улаз
# 12
# 15
# 155
# 14
# Излаз
# 2
# i=0

# try:
#     while True:
#         broj=input('unesi broj')
#         for g in broj:
#             if g=='5':
#                 i+=1 
#                 break 
# except:
#     pass 
# print(i)
#===================================================================

#===================================================================
#Zadatak  24
# Задатак: Комбинација два броја минимумом и максимумом одговарајућих цифара
# Два дата природна броја се комбинују тако што се потпишу један испод другог, као када се сабирају, али се
# свака цифра резултата одређује као мања или као већа од две цифре (ако су бројеви различите дужине тада
# се испред краћег броја допише онолико нула колико је потребно да се бројеви изједначе по дужини). Нпр.
# за бројеве 174 и 38, добија се 34 ако се узима мања од две цифре тј. 178 ако се узима већа.
# Улаз: Свака од две линије стандарног улаза садржи по један природан број.
# Излаз: На стандарном излазу приказати два природна броја - један који се добија комбиновањем два броја
# узимајући мању, а други узимајући већу цифру на свакој позицији.
# Пример
# Улаз
# 174
# 38
# Излаз
# 34
# 178

# broj1=input('broj 1 brate ')
# broj2=input('brate 2 broj ')
# duzina=max(len(broj1),len(broj2))
# broj1=broj1.zfill(duzina)
# broj2=broj2.zfill(duzina)
# manje=''
# vece=''
# for i in range(duzina):
#     manja=min(int(broj1[i]),int(broj2[i]))
#     veca=max(int(broj1[i]),int(broj2[i]))
#     manja=str(manja)
#     veca=str(veca)
#     manje+=manja
#     vece+=veca
# print(int(manje))
# print(int(vece))
#===================================================================

#===================================================================
#Zadatak  25
# Задатак: Максимална разлика суседних
# Написати програм којим се за n учитаних целих бројева одређује по апсолутној вредности највећа разлика
# два суседна елемента.
# Улаз: У првој улазној линији учитава се природан број n (2 ≤ n ≤ 100), a у следећим n целих бројева у
# интервалу [-100,100].
# Излаз: Исписује се тражени број који представља највећу апсолутну разлику два суседна броја.
# Пример
# Улаз
# 5
# -20
# 30
# 5
# 90
# 70
# Излаз
# 85
# najvecaraz=0
# n=int(input('broj brojeva '))
# niz=[int(input('broj ')) for i in range(n)]
# for i in range(n-1):
#     razlika=abs(niz[i]-niz[i+1])
#     if razlika>najvecaraz:
#         najvecaraz=razlika
# print(najvecaraz)
#===================================================================

#===================================================================
#Zadatak  26
# Задатак: Провера монотоности
# Током неколико дана маратонац се спрема за предстојећу трку. За сваки дан познато је растојање које је
# тог дана претрчао. Одредити да ли је тркач правио напредак тј. да ли су учитани бројеви уређени у строго
# растућем редоследу.
# Улаз: Прва линија стандардног улаза садржи природан број N (1 ≤ N ≤ 50) који представља број дана, а
# у свакој од наредних N линија налази се по један природан број који представља број метара који је тркач
# претрчао одговарајућег дана.
# Излаз: На стандардном излазу исписати одговор Da ако су бројеви у строго растућем поретку и одговор Ne
# у супротном.
# Пример 1
# Улаз
# 4
# 19
# 20
# 22
# 23
# Излаз
# Da
# Пример 2
# Улаз
# 4
# 20
# 20
# 23
# 23
# Излаз
# Ne 
# n=int(input('broj dana provere '))
# napredak=True
# trenutni=int(input('predjena kilometraza '))
# for _ in range(1,n):
#     prethodni=trenutni
#     trenutni=int(input('predjena kilometraza'))
#     if prethodni>=trenutni:
#         napredak=False
# print(('da' if napredak else 'ne'))
#===================================================================

#===================================================================
#Zadatak  27
# Задатак: Парно непарни
# Пера се игра картама. Све карте које је имао у руци је сложио тако да прво иду све карте са парним бројевима,
# а затим оне са непарним бројевима (могуће је и да је Пера имао само парне или само непарне карте). Напиши
# програм који проверава да ли је Пера исправно сложио карте.
# Улаз: Са стандардног улаза учитавају се бројеви карата (природни бројеви између 2 и 10) све док се не дође
# до краја улаза (он се може унети са Ctrl+Z тј. Ctrl+D). Карата има најмање две, а највише десет.
# Излаз: На стандардни излаз исписати da ако је Пера добро сложио карте тј. ne у супротном.
# Пример 1
# Улаз
# 2
# 6
# 4
# 5
# 3
# Излаз
# da
# Пример 2
# Улаз
# 2
# 6
# 3
# 5
# 4
# Излаз
# ne


# prethodni=int(input('broj '))
# tacno=True
# negativni=False
# try:
#     while True:
#         trenutni=int(input('broj '))
#         if prethodni%2!=0:
#             negativni=True
#         if trenutni%2==0 and negativni==True:
#             tacno=False
#         prethodni=trenutni
# except:
#     pass 
# print(('da ' if tacno else 'ne'))
#===================================================================

#===================================================================
#Zadatak  28
# Задатак: Растуће цифре
# Написати програм којим се испитује да ли су цифре декадног записа природног броја растуће идући од цифре
# најмање тежине (цифре јединица).
# Улаз: Са стандардног улаза се учитава природан број од 0 до 100000.
# Излаз: На стандардном излазу се исписује текстуални одговор DA или NE.
# Пример 1
# Улаз
# 97642
# Излаз
# DA
# Пример 2
# Улаз
# 79653
# Излаз
# NE
# rastuci=True 
# broj=int(input('broj za pregledanje '))
# prethodni=broj%10
# broj//=10
# while broj>0:
#     trenutni=broj%10
#     if trenutni<=prethodni:
#         rastuci=False
#         break
#     prethodni=trenutni
#     broj//=10
# print(('da' if rastuci else 'ne'))
#===================================================================

#===================================================================
#Zadatak  29
# Задатак: Поређани датуми
# Милица је направила списак рођендана својих другарица. Поређала је датуме њиховог рођења хронолошки
# (од најдавнијег до најскоријег). Напиши програм који проверава да ли је Милица то добро урадила.
# Улаз: Са стандардног улаза учитава се број n (1 ≤ n ≤ 100). У наредних n линија налази се n исправних,
# међусобно различитих датума. Датуми су записани тако што су записани дан, месец и година, раздвојени
# размацима.
# Излаз: У јединој линији стандардног излаза исписати DA ако су датуми исправно (растуће) поређани, тј. NE
# ако нису.
# Пример
# Улаз
# 3
# 3 7 2005
# 14 8 2006
# 10 5 2006
# Излаз
# NE

# n=int(input('broj datuma njene drugarice :))))'))
# dan,mesec,godina=map(int,input('dan mesec i godina neke slizavke ').split())
# prethodni=(godina,mesec,dan)
# tacno=True
# for _ in range(n-1):
#     dan1,mesec1,godina1=map(int,input('dan mesec i godina neke slizavke ').split())
#     trenutni=(godina1,mesec1,dan1)
#     if trenutni>prethodni:
#         tacno=False 
#         break
#     prethodni=trenutni 
# print(('da'if tacno else 'ne'))
#===================================================================

#===================================================================
#Zadatak  30
# Задатак: Тестераст низ
# За низ целих бројева одредити да ли је тестераст. Кажемо да је низ тестераст ако за његове чланове важи
# поредак a1 < a2, a2 > a3, a3 < a4, a4 > a5 итд. или a1 > a2, a2 < a3, a3 > a4, a4 < a5 итд.
# Улаз: У првој линији стандардног улаза налази се природан број N (2 ≤ N ≤ 100). У следећих N линија
# налази се по један цео број из интервала од −109 до 109
# . Бројеви представљају елементе низа.
# Излаз: На стандардни излаз приказати поруку DA ако низ јесте тестераст. Иначе приказати поруку NE.
# Пример 1
# Улаз
# 6
# 2
# 1
# 3
# 2
# 4
# 3
# Излаз
# DA
# Пример 2
# Улаз
# 6
# 1
# 2
# 3
# 4
# 5
# 6
# Излаз
# NE
# tacno=True
# n=0
# ulazi=int(input('broj ulaza '))
# prethodni=int(input('broj '))
# for _ in range(ulazi-1):
#     trenutni=int(input('broj '))
#     if prethodni>trenutni and n==0:
#         n=1 
#     elif prethodni<trenutni and n==1:
#         n=0 
#     elif prethodni>trenutni and n==1 or prethodni<trenutni and n==0:
#         tacno=False 
#     prethodni=trenutni
# print(('da ' if tacno else 'ne'))
#===================================================================


#===================================================================
#Zadatak  31
# Задатак: Продужавање титлова
# Станислав је ђак првог разреда и тек учи да чита. Покушава да прочита титлове на цртаном филму који гледа
# током карантина, али му често недостаје неколико секунди да би их прочитао до краја. Његова сестра жели
# да му помогне тако што ће продужити трајање сваког титла за пет секунди. Међутим, некада је пауза до
# наредног титла краћа од 5 секунди, па да се титлови не би преклапали, она титл продужава тачно до почетка
# наредног. Последњи титл се сигурно може продужити за 5 секунди. Пошто је филм дугачак, ово је напоран
# посао. Напиши програм који би Станислављевој сестри помогао да овај посао брже заврши.
# Улаз: Са стандардног улаза се уноси укупан број титлова n (1 ≤ n ≤ 1000), и након тога у наредних n
# линија подаци о титловима. За сваки титл се уноси време почетка и време краја (у односу на почетак филма),
# раздвојени размаком. Свако време задато је у облику hh:mm:ss. Филм не траје дуже од 3 сата.
# Излаз: На стандардни излаз исписати податке о продуженим титловима (у истом формату у ком су унети).
# Пример
# Улаз
# 5
# 00:01:43 00:01:48
# 00:01:56 00:01:59
# 00:02:17 00:02:23
# 00:02:24 00:02:26
# 00:02:30 00:02:38
# Излаз
# 5
# 00:01:43 00:01:53
# 00:01:56 00:02:04
# 00:02:17 00:02:24
# 00:02:24 00:02:30
# 00:02:30 00:02:43
# def sekunde(h,m,s):
#     vreme=s
#     vreme+=m*60
#     vreme+=h*60 
#     return vreme 
# def vreme(prethodni):
#     s=prethodni%60 
#     m=(prethodni//60)%60
#     h=(prethodni//3600)%24 
#     print(f'{h:02}:{m:02}:{s:02}')
# n=int(input('koliko titlova ima '))
# h,m,s,hh,mm,ss=map(int,input('sat minut i sekunda pocetka i kraja').split())
# prethodni=sekunde(hh,mm,ss)
# prethodni1=sekunde(h,m,s)
# for _ in range(n-1):
#     h1,m1,s1,hh1,mm1,ss1=map(int,input('sat minut i sekunda pocetka i kraja').split())
#     trenutni=sekunde(h1,m1,s1)
#     if prethodni+5<=trenutni:
#       vreme(prethodni1); vreme(prethodni+5)
#     else:
#       vreme(prethodni1);  vreme(prethodni+(trenutni-prethodni))
#     prethodni=sekunde(hh1,mm1,ss1)
#     prethodni1=trenutni
#===================================================================















    
    
    
    
    