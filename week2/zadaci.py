#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 20 23:05:06 2025

@author: alex
"""

#===================================================================
#Zadatak  1
# Задатак: Генератор случајних бројева
# У рачунарству се често јавља потреба за генерисањем случајних (насумичних) бројева. Већина програмских
# језика обезбеђује функцију која враћа насумично одабран реалан број из интервала [0, 1) (тај број већи или
# једнак од 0, а строго мањи од 1), подразумевајући да програмер може накнадним аритметичким трансформацијама добити број из било ког интервала [a, b) (за који важи да је a < b). Напиши програм који за унети
# број x из интервала [0, 1) одређује њему одговарајући број из интервала [a, b), подразумевајући да се пресликавање врши линеарном функцијом (број који се тражи дели интервал [a, b) у истом односу у ком тачка
# x дели интервал [0, 1)).
# Улаз: Са стандардног улаза учитава се један реалан број x из интервала [0, 1) (број који је вратио генератор
# случајних бројева), затим, у наредном реду један реалан број a и онда у наредном реду број b (при том важи
# a < b).
# Излаз: На стандардни излаз исписати један реалан број из интервала [a, b) који се добија када се унети број
# x преслика линеарном функцијом која пресликава интервал [0, 1) на интервал [a, b). Резултат приказати
# заокружен на 5 децимала.

# x=float(input("x "))
# a=float(input("a "))
# b=float(input("b "))
# y=(b-a)*x + a
# print(format(y,'.5f'))
#===================================================================



#===================================================================
#Zadatak  2
# Задатак: Група радника
# Група коју чини n радника уради посао за s сати. Написати програм којим се одређује за колико сати ће
# посао бити завршен ако се прикључи још m радника, а сваки радник ради посао подједнако ефикасано.
# Улаз: У три линије стандардног улаза се редом налазе природан број n, реалан број s и природан број m.
# Излаз: Један рeалан број, заокружен на две децимале, који представља број сати потребних да се посао
# заврши када посао ради n + m радника.
# Пример
# Улаз
# 1
# 3
# 1
# Излаз
# 1.5

# n=int(input("Broj radnika "))
# s=float(input("broj sati uradjenih od strane broja tih radnika "))
# m=int(input("koliko jos radnika dolazi? "))
# s1=(s*+n)/(m+n)
# print(format(s1,'.2f'))
#===================================================================



#===================================================================
#Zadatak  3
# Задатак: Такси
# У такси су истовремено ушла три путника, али су излазили један по један. Договорили су се да у плаћању
# сваког дела вожње подједнако учествују путници који су у том делу вожње били у таксију. Ако се зна стање
# на таксиметру у динарима када је изашао свако од њих, колико треба да плати путник који је изашао први,
# колико други, а колико трећи?
# Улаз: Са стандардног улаза се учитавају три реална броја, у сваком реду по један, у следећем редоследу:
# • c1 - стање на таксиметру у моменту изласка првог путника,
# • c2 - стање на таксиметру у моменту изласка другог путника,
# • c3 - стање на таксиметру у моменту изласка трећег путника.
# При томе важи c1 < c2 < c3.
# Излаз: На стандардни излаз исписати три реална броја заокружена на две децимале (у сваком реду по један),
# који редом представљају трошкове путовања првог, другог и трећег путника.
# Пример
# Улаз
# 1200.0
# 1500.0
# 2000.0
# Излаз
# 400.00
# 550.00
# 1050.00

# c1=float(input("Sranje na taksimetru u momentu za prvog lika: "))
# c2=float(input("stanje u momentu za drugog lika: "))
# c3=float(input("stanje u momentu za treceg like: "))
# t1=c1/3 
# t2=c1/3 + (c2-c1)/2 
# t3=c1/3 + (c2-c1)/2 + (c3-c2)
# print(format(t1,'.2f'))
# print(format(t2,'.2f'))
# print(format(t3,'.2f'))
#===================================================================







#===================================================================
#Zadatak  4                                                         mid chatgpt carry
# Задатак: Курс
# Написати програм којим се на основу датог куповног и продајног курса евра према динару и куповног и
# продајног курса долара према динару, израчунава куповни и продајни курс долара према евру и евра према
# долару. Куповни курс валуте 1 према валути 2 представља износ валуте 1 који се може купити јединицом
# валуте 2 (валута 1 се третира као роба која се купује), а продајни курс валуте 1 према валути 2 представља
# износ валуте 2 који се може добити продајом јединице валуте 1 (валута 1 се третира као роба која се продаје).
# На пример, куповни курс евра према динару је број динара потребних да би се купио један евро, док је
# продајни курс евра према динару број динара који се могу добити продајом једног евра. Све трансакције
# евра према долару и обрнуто се обављају, по прописима НБС, преко конверзије у динаре.
# Улаз: У свакој од четири линије стандардног улаза налазе се редом куповни курс евра према динару, продајни
# курс евра према динару, куповни курс долара према динару, продајни курс долара према динару (реални
# бројеви).
# Излаз: У свакој од четири линије стандардног излаза исписују се редом реални бројеви, куповни курс долара
# према евру, продајни курс долара према евру, куповни курс евра према долару и продајни курс евра према
# долару, заокружени на 4 децимале.
# Пример
# Улаз
# 123.59
# 122.85
# 109.72
# 109.06
# Излаз
# 0.8931
# 0.8824
# 1.1332
# 1.1197

# Ek=float(input("Kupovni kurs evra prema dinaru: "))
# Ep=float(input("Prodajni kurs evra prema dinaru: "))
# Dk= float(input("Kupovni kurs dolara prema dinaru"))
# Dp=float(input("Prodajni kurs dolara prema dinaru"))

# jedan=Dp/Ek
# dva=Dk/Ep 
# tri=Ep/Dk
# cetiri=Ek/Dp
# print(format(jedan, '.4f'))
# print(format(dva, '.4f'))
# print(format(tri, '.4f'))
# print(format(cetiri, '.4f'))
#===================================================================



#===================================================================
#Zadatak  5
# Задатак: Степен и корен
# Ђока је вежбао множење децималних бројева тако што је за неки број a рачунао производ a · a · . . . · a
# | {z }
# n
# , тј.
# производ у којем се број a јавља n пута као чинилац. Након тога се са својом другарицом Даницом играо
# тако што јој је задавао да она погоди број a када јој он каже број n и резултат који је добио. Напиши програм
# који Ђоки помаже да провери да ли је добро рачунао, a Даници помаже да провери да ли је добро погодила
# непознат број.
# Улаз: Са стандардног улаза уноси се реалан број x (са највише две децимале) и цео број n.
# Излаз: На стандардни излаз се исписују два реална броја (заокружена на пет децимала) и то сваки у посебном
# реду:
# • број s такав да је s = x · x · . . . · x | {z }
# n
# ,
# • број k такав да је x = k · k · . . . · k
# | {z }
# n
# .
# 19
# ГЛАВА 2. АРИТМЕТИКА
# Пример
# Улаз
# 2.5
# 5
# Излаз
# 97.65625
# 1.20112


# x=float(input("x "))
# n=int(input("n "))
# s=x**n
# k=x**(1/n)
# print(format(s,'.5f'))
# print(format(k, '.5f'))
#===================================================================






#===================================================================
#Zadatak  6
#Задатак: Разломак у мешовит број
# За дате природне бројеве a и b написати програм којим се дати неправи разломак a
# b
# преводи у мешовит број
# n
# c
# b
# , такав да важи да је c
# b < 1.
# Улаз: У првој линији стандардног улаза налази се природан број a који представља бројилац неправог разломка, а у другој линији природан број b различит од нуле који представља именилац разломка (a ≥ b).
# Излаз: Прва и једина линија стандардног излаза треба да садржи мешовити запис разломка, прецизније
# природан број, бројилац и именилац мешовитог броја међусобно раздвојени по једном празнином (бланко
# знаком).
# Пример
# Улаз
# 23
# 8
# Излаз
# 2 7 8

# a=int(input("a "))
# b=int(input("b "))
# print(a//b, a%b, b)
#===================================================================


#===================================================================
#Zadatak  7
# Задатак: Врста и колона
# Спортисти на дресу имају бројеве 0, 1, 2, . . .. У том редоследу се ређају за дефиле за свечано отварање
#такмичења у коме корачају организовани у врсте од по 5. Напиши програм који на основу редног броја дреса
# одређује у којој ће се врсти и колони спортиста налазити (врсте и колоне се броје од један).
# Улаз: Са улаза се уноси цео број x (0 ≤ x ≤ 1000) који представља број дреса спортисте.
# Излаз: На стандардни излаз исписати број врсте и колоне раздвојене размаком.
# Пример
# Улаз
# 17
# Излаз
# 4 3
# Објашњење
# 0 1 2 3 4
# 5 6 7 8 9
# 10 11 12 13 14
# 15 16 17 18 19
# 20 21 ...
# Као што се са слике види, спортиста са дресом 17 је у врсти број 4 и колони број 3

# x=int(input("x "))
# print(x//5+1, x%5+1)
#===================================================================


#===================================================================
#Zadatak  8
# Задатак: Шаховска табла број црних поља
# На шаховској табли ширине n и дужине m, горње лево поље је беле боје. Написати програм којим се одређује
# број црних поља на датој шаховској табли.
# Улаз: На стандардном улазу налазе се два природна броја n, m ≤ 100.
# Излаз: Број црних поља на шаховској табли.
# Пример
# Улаз
# 5
# 3
# Излаз
# 7

# 1
#===================================================================





#===================================================================
#Zadatak  9
# Задатак: Икс-окс
# Мирко је мали програмер који покушава да испрограмира игрицу икс-окс. Близу је завршетка, али му је
# потребна мала помоћ. Смислио је да корисник мишем одређује квадрат у који ће се његов симбол уписати.
# Поље за игру се састоји од 9 квадрата (распоређена у три врсте и три колоне) и сваки квадрат је димензије
# 100 пута 100 пиксела (укупно поље је димензије 300 пута 300 пиксела). Познат је положај пиксела на који је
# кликнуто мишем и потребно је одредити редни број квадрата у којем се тај пиксел налази. Положај пиксела је
# одређен редним бројевима (координатама) тог пиксела по хоризонтали и по вертикали, рачунајући од доњег

# левог угла поља (пиксели се броје од 1 до 300). Квадрати се броје од 1 до 9, врсту по врсту, почевши од доњег
# левог угла поља, како је приказано на следећој слици:
# 7 8 9
# 4 5 6
# 1 2 3
# Улаз: Са стандардног улаза се учитавају два цела броја (сваки у посебном реду) x и y (1 ≤ x, y ≤ 300) који
# представљају x тј. y координату пиксела на који је кликнуто мишем.
# Излаз: На стандардни излаз се исписује један број од 1 до 9 који представља редни број квадрата.
# Пример 1
# Улаз
# 1
# 1
# Излаз
# 1
# Пример 2
# Улаз
# 120
# 280
# Излаз
# 8
# Пример 3
# Улаз
# 100
# 201
# Излаз
# 7
# Пример 4
# Улаз
# 101
# 300
# Излаз
# 5

# n=int(input("n? "))
# m=int(input("m? "))
 
# if n<101:
#     x,y,z=1,4,7
# elif 100<n<201:
#     x,y,z=2,5,8
# else:
#     x,y,z=3,6,9

# if m<101:
#     print(x)
# elif 100<m<201:
#     print(y)
# else:
#     print(z)
#===================================================================



#===================================================================
#Zadatak  10
# Задатак: По два и по три
# Људи иду путем у колони два по два. На месту где је тротоар широк, престројили су се тако да иду три по
# три. При томе је редослед људи остао исти ако се посмтрају ред по ред слева на десно.
# Напиши програм који одређује у ком реду и колони се после престројавања налази човек који је на почетку
# био у реду R и колони K (врсте и колоне се броје од један).
# Улаз: У првом реду улаза је цео број R (1 ≤ R ≤ 1000), а у другом реду цео број K (1 ≤ K ≤ 2).
# Излаз: На стандардни излаз исписати број врсте и колоне после престројавања, раздвојене размаком.
# Пример 1
# Улаз
# 2
# 1
# Излаз
# 1 3
# Објашњење
# a b a b X
# X d d e f
# e f g h ...
# g h
# ...
# Човек који је био први у другом реду (означен словом X), након престројавања ће бити трећи у првом реду.
# Пример 2
# Улаз
# 5
# 2
# Излаз
# 4 1
# Објашњење
# a b a b c
# c d d e f
# e f g h i
# g h X k l
# i X ...
# k l
# ...
# Човек који је био други у петом реду (означен словом X), након престројавања ће бити први у четвртом реду

# r=int(input("red: "))
# k=int(input("kolona: "))
# broj= r*2+k
# r1=broj//3 
# if broj % 3 ==0:
#     k2=1 
# elif broj % 3 ==1 :
#     k2=2 
# elif broj % 3==2:
#     k2=3 
# print(r1, k2)
#===================================================================




#===================================================================
#Zadatak  11
# Задатак: Јарди, стопе и инчи
# У САД се дужина мери у јардима, стопама и инчима. Један јард има 3 стопе, а једна стопа има 12 инча.
# Написати програм који дужину унету у јардима, стопама и инчима прерачунава само у инче.
# Улаз: Са стандардног улаза се уносе три цела броја, сваки у посебном реду. Број j (0 ≤ j ≤ 10) представља
# број јарди, број s (0 ≤ s ≤ 2) представља број стопа, а број i (0 ≤ i ≤ 11) представља број инча.
# Излаз: На стандардни излаз исписати само један цео број који представља унету дужину изражену само у
# инчима.
# Пример
# Улаз
# 7
# 2
# 5
# Излаз
# 281

# j=int(input("koliko jardi: "))
# s=int(input("koliko stopa? "))
# i=int(input("koliko inca "))
# si=s*12
# ji=j*(3*12)
# zbir=i+si+ji
# print(zbir)
#===================================================================



#===================================================================
#Zadatak  12
# Задатак: Октални бројеви
# У рачунарству се често користе тзв. октални бројеви - бројеви записани у основи 8, коришћењем само цифара
# од 0 до 7. Напиши програм који врши конверзију четвороцифрених окталних бројева у декадне вредности и
# обратно.
# Улаз: Са стандардног улаза се учитавају 4 окталне цифре (свака у посебном реду, почевши од цифре највеће
# тежине) и након тога декадно записан природан број n (0 ≤ n < 8
# 4
# ).
# Излаз: На стандардном излазу у првој линији исписати декадну вредност броја формираног од учитаних
# окталних цифара, а у другој линији четвороцифрену окталну репрезентацију броја n.
# Пример
# Улаз
# 1
# 2
# 3
# 4
# 1234
# Излаз
# 668
# 2322


# def izoktalnog(c3,c2,c1,c0):
#     return c3*8*8*8 + c2*8*8 + c1*8 + c0
# def uoktalni(n):
#     c0=n%8
#     c1=(n//8)%8
#     c2=(n//(8**2))%8
#     c3=(n//(8**3))%8
#     return (c3,c2,c1,c0)
# c0=int(input("c0 "))
# c1=int(input("c1 "))
# c2=int(input("c2 "))
# c3=int(input("c3 "))
# print(izoktalnog(c3,c2,c1,c0))

# n=int(input("n "))
# print(uoktalni(n))
#===================================================================



#===================================================================
#Zadatak  13
# Задатак: Избаци цифру стотина
# Напиши програм који из декадног записа броја избацује цифру стотина.
# Улаз: Са стандардног улаза уноси се један природан број мањи од милијарду.
# Излаз: На стандардни излаз исписује се број добијен избацивањем цифре стотина из декадног записа унетог
# броја.
# Пример
# Улаз
# 123456
# Излаз
# 12356

# broj=int(input("broj "))
# zadnji=broj%10
# predzadnji=(broj//10)%10
# broj=broj//1000
# broja=broj*100+predzadnji*10+zadnji
# print(broja)
#===================================================================



#===================================================================
#Zadatak  14
# Задатак: Поноћ
# Напиши програм који за дато време у току дана одређује колико је секунди протекло од претходне поноћи и
# колико је сати, минута и секунди остало до следеће поноћи.
# Улаз: Са стандардног улаза уносе се три цела броја (сваки у посебном реду) који одређују један временски
# тренутак:
# • h - сат (0 ≤ h < 24)
# • m - минут (0 ≤ m < 60)
# • s - секунд (0 ≤ s < 60)
# Излаз: На стандардни излаз исписати две линије. У првој исписати цео број који представља број секунди
# протеклих од претходне поноћи. У другој исписати три цела броја раздвојена двотачкама - број сати hp
# (0 ≤ hp < 24), број минута mp (0 ≤ mp < 60) и број секунди sp (0 ≤ sp < 60) до наредне поноћи.
# Пример
# Улаз
# 10
# 23
# 52
# Излаз
# 37432
# 13:36:8

# h=int(input("Koliko je sati? "))
# m=int(input("Koliko ima minuta? "))
# s=int(input("Koliko ima sekundi? "))
# hms=((h*60)*60)+(m*60)+s
# print(hms)
# preostalo=86400-hms
# hp=preostalo//60//60
# mp=(preostalo//60)%60
# sp=preostalo%60
# #sp=preostalo//((hp*60)*60)+mp*60
# print(hp,':',mp,':',sp)
#===================================================================





#===================================================================
#Zadatak  15
# Задатак: Трајање вожње
# Познати су сат, минут и секунд почетка и краја вожње аутобусом (вожња почиње и завршава се у једном
# дану). Написати програм који одређује колико сати, минута и секунди је трајала та вожња.
# Улаз: Са стандардног улаза учитава се 6 бројева (сваки у засебном реду). Прво сат, минут и секунд почетка
# вожње, а затим сат, минут и секунд краја вожње. Сати су из интервала [0, 24), а минути и секунди из интервала
# [0, 60).
# Излаз: На стандардни излаз се исписује један ред у коме су три броја раздвојена двотачком: h (0 ≤ h < 24)
# - број сати, m (0 ≤ m < 60) број минута и s (0 ≤ s < 60) број секунди трајања вожње.
# Пример
# Улаз
# 2
# 59
# 8
# 3
# 1
# 14
# Излаз
# 0:2:6

# hpoc=int(input("Pocetak sati voznje: "))
# mpoc=int(input("Pocetak minuta voznje: "))
# spoc=int(input("Pocetak sekundi voznje: "))

# hkr=int(input("Kraj sata voznje: "))
# mkr=int(input("Kraj minuta voznje: "))
# skr=int(input("Kraj sekundi voznje: "))

def usekundi(h,m,s):
    return h*60*60+m*60+s

def usatu(x):
    s=x%60
    m=(x//60)%60
    h=(x//60//60)%24
    return h,m,s

# pocetak= usekundi(hpoc,mpoc,spoc)
# kraj= usekundi(hkr,mkr,skr)
# trajanje=kraj-pocetak 
# hi,mi,si=usatu(trajanje)
# print(hi,':',mi,':',si)
#===================================================================



#===================================================================
#Zadatak  16
# Задатак: UNIX време
# Од оперативног система UNIX време у рачунарима се изражава као број секунди протеклих од почетка епохе тј. од 1. јануара 1970. године. По узору на то, осмислили смо систем мерења времена у коме се време
# изражава бројем милисекунди протеклих од укључивања рачунара. У неком тренутку, на рачунару је пуштена песма. Ако је познато време када је песма пуштена и дужина трајања песме у милисекундама, напиши
# програм који одређује када је песма завршена.
# Улаз: Са стандардног улаза учитавају се следећи цели бројеви (сваки у посебном реду):
# • dan (0 ≤ dan ≤ 10), sat (0 ≤ sat < 24), min (0 ≤ min < 60), sek (0 ≤ sek < 60), mili (0 ≤ mili <
# 1000) - број дана, сати, минута, секунди и милисекунди протеклих од тренутка укључивања рачунара

# до пуштања песме.
# • trajanje (0 ≤ trajanje ≤ 1000000) - број милисекунди колико траје песма.
# Излаз: На стандардни излаз исписати следеће целе бројеве, раздвојене двотачкама:
# • dan (0 ≤ dan ≤ 100), sat (0 ≤ sat < 24), min (0 ≤ min < 60), sek (0 ≤ sek < 60), mili (0 ≤ mili <
# 1000) - број дана, сати, минута, секунди и милисекунди протеклих од тренутка укључивања рачунара
# до завршетка песме.
# Пример 1
# Улаз
# 3
# 10
# 15
# 23
# 843
# 100000
# Излаз
# 3:10:17:3:843
# Пример 2
# Улаз
# 4
# 23
# 59
# 59
# 517
# 12345
# Излаз
# 5:0:0:11:862
# Пример 3
# Улаз
# 10
# 23
# 59
# 59
# 999
# 1000000
# Излаз
# 11:0:16:39:999

# d=int(input("Dan od kad je kompjuter poceo raditi: "))
# h=int(input("sat od kada je...: "))
# m=int(input("minut od kada je: "))
# s=int(input("sekund od kada je: "))
# ms=int(input("milisekund od kada je: "))
# pesma=int(input("vreme trajanja pesme u milisekundima"))

# sveusekundi=usekundi(h,m,s)+((d*24)*60)*60
# ukupnoums=sveusekundi*1000 + ms
# uukp=ukupnoums+pesma
# mmp=uukp%1000
# uukp=uukp//1000
# hp,mp,sp=usatu(uukp)
# dp=uukp//60//60//24

# print(dp,':',hp,':',mp,':',sp,':',mmp)
#===================================================================



#===================================================================
#Zadatak  17
# Задатак: Угао сатне казаљке
# Ако је дат угао који сатна казаљка заклапа са вертикалном полуправом која спаја центар и врх сата (број 12),
# одредити време у сатима и минутима.
# Улаз: Са стандардног улаза учитава се цео број који представља угао у степенима.
# Излаз: На стандардни излаз исписати два цела броја h (0 ≤ h < 12) и m (0 ≤ m < 60) који представљају
# број сати и минута који су најближи положају сатне казаљке.
# Пример
# Улаз
# 90
# Излаз
# 3:0
# Пример 2
# Улаз
# 200
# Излаз
# 6:40

# ugao=int(input("Ugao koji se kazaljka nalazi; "))
# h=ugao//30
# min=(ugao%30) * 2 #ide puta dva jer se minuti racunaju kao h//60, a to je u uglovima 0/1
# print(h,':',min)
#===================================================================



#===================================================================
#Zadatak  18
# Задатак: Угао између казаљки
# Одредити угао у степенима и минутима између сатне и минутне казаљке ако је задато време у сатима и минутима. Угао је увек позитиван и мери се у смеру кретања казаљки на сату (зато може да буде и већи од 180
# степени).
# Улаз: Учитавају се два броја, сваки у посебној линији. У првој линији је број сати (између 0 и 12), а у другој
# линији је број минута (између 0 и 59).
# Излаз: Степен угла 0 до 359, и минут угла од 0 до 59, раздвојени двотачком тј. карактером :.
# 35
# ГЛАВА 2. АРИТМЕТИКА
# Пример 1
# Улаз
# 1
# 30
# Излаз
# 135:0
# Пример 2
# Улаз
# 12
# 30
# Излаз
# 165:0

#rip ne radim ovo

#===================================================================




#===================================================================
#Zadatak  19
# Задатак: Размени цифре
# Напиши програм којим се у датом природном броју размењује цифра јединица и цифра стотина. За број са
# мање од три цифре сматрамо да су недостајуће цифре једнаке 0.
# Улаз: У првој линији стандардног улаза налази се природан број мањи од милијарде.
# Излаз: На стандардни излаз исписати број добијен после размене цифре јединица и цифре стотина.
# Пример
# Улаз
# 2349
# Излаз
# 2943

# broj=input("Broj").zfill(3)
# prefiks=broj[:-3]

# stotina=broj[-3]
# desetina=broj[-2]
# jedinica=broj[-1]
# print(prefiks+jedinica+desetina+stotina)
#===================================================================







