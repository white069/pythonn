#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 21 15:52:35 2025

@author: alex
"""

def ispisati(x):
    print("#===================================================================")
    print("#Zadatak ", x)
    
    
    print("#===================================================================")
    
    
#===================================================================
#Zadatak  1
#Написати функцију која враћа збир првих н бројева. Тражи се рекурзивно решење.
def zbir(n):
    if n==1:
        return 1
    else:
        return n+zbir(n-1)

#===================================================================    
    
    
#===================================================================
#Zadatak  2
#Написати функциjу коjа не користи петље, а враћа збир цифара унетог произвољног целог броjа.
def cifre(n):
    if n<10:
        return n
    else:
        return n%10 + cifre(n//10)
#===================================================================    
    
    
#===================================================================
#Zadatak  3
#Написати функциjу коjа врши израчунавање производа два броjа понављањем сабирања.
def itetbroj(x,y):
    z=0
    while y>0:
        z=z+x
        y-=1
    return z

def rekbroj(x,y):
    if y==0:
        return 0
    else:
        return x + rekbroj(x,y-1)
#===================================================================


#===================================================================
#Zadatak  4
#Написати функцију која враћа факторијел броја н.
def faktorijel(x):
    if x==1:
        return 1
    else:
        return x*faktorijel(x-1)

def faktorijeliter(x):
    rezultat=1
    while x>0:
        rezultat*=x
        x-=1
    return rezultat
#===================================================================


#===================================================================
#Zadatak  5
#Написати функцију која враћа н-ти члан Фибоначијевог низа. Сваки члан Фибоначијевог низа се добија
# као збир претходна два његова члана. Почетни чланови низа су 0 и 1.
def rekfib(n):
    if n==1:
        return 1
    elif n==0:
        return 0
    else:
        return rekfib(n-1)+rekfib(n-2)

def iterfib(n):
    k,i=0,1
    for _ in range(n):
        k,i=i,k+i
    return k
#===================================================================


#===================================================================
#Zadatak  6
#Написати функциjу коjа цео броj преводи из декадног у бинарни систем. Траже се и рекурзивно и итеративно решење.
def iterbin(n):
    ostatak=[]
    while n>0:
        ostatak.append(n%2)
        n//=2
    ostatak=ostatak[::-1]
    resenje=0
    for i in ostatak:
        resenje=resenje*10+i
    return resenje
        
        
def rekbin(n):
    if n<=1:
        return n
    else:
        return int(str(rekbin(n//2))+str(n%2))


def rekbin1(n):
    if n <= 1:
        print("Bazni slučaj:", n)
        return n
    else:
        print("Poziv za:", n)
        levi_deo = rekbin(n // 2)
        ostatak = n % 2
        rezultat = str(levi_deo) + str(ostatak)
        print(f"Spajam: {levi_deo} + {ostatak} = {rezultat}")
        return int(rezultat)
#===================================================================

#===================================================================
#Zadatak  7
#Написати функциjу коjа за унети цео броj рачуна следећи поткорени израз (у примеру jе ’унети’ броj 5):
from math import sqrt
def rekkoren(n):
    if n==1:
        return 1 
    else:
        return sqrt(n+rekkoren(n-1))

def iterkoren(n):
    broj=0
    i=0
    while i<n:
        broj=sqrt(broj+i+1)
        i+=1
    return broj
#===================================================================

#===================================================================
#Zadatak  8

#Написати функциjу коjа израчунава целоброjну вредност логаритма унетог позитивног природног броjа за задату основу коjа jе већа или jеднака од два, таквог да, када се задата основа степенуjе целоброjном вредношћу коjу процедура враћа, добиjени резултат jе мањи или jеднак унетом броjу.
def log(broj, osnova):
    i=0
    while osnova**i<=broj:
        i+=1 
    return i-1

def reklog(broj,osnova):
    if broj<osnova:
        return 0
    else:
        return 1+reklog(broj//osnova,osnova)
#===================================================================

#===================================================================
#Zadatak  9
#Написати функцију коjа враћа вредности из одређене врсте и колоне такозваног Паскаловог троугла. Сваки броj унутар Паскаловог троугла представља збир два броjа коjи се налазе изнад њега, док су краjњи броjеви увек jединице. Сматрати да врсте и колоне Паскаловог троугла почињу од jедан, а не од нула.

def paskal(r,c):
    if c==1 or r==c:
        return 1
    else:
        return paskal(r-1,c-1)+paskal(r-1,c)
#===================================================================



#===================================================================
#Zadatak  10
#Написати рекурзивну функцију коjа врши изокретање ниске, односно ради исто што и ниска[::-1].
def reknik(niska):
    if len(niska)<=1:
        return niska
    else:
        return niska[-1]+ reknik(niska[:-1])
#===================================================================


#===================================================================
#Zadatak  11
# Написати функцију која проверава да ли је произвољна реч палиндром.
# Тражи се рекурзивно решење.
def rekpal(niska):
    if len(niska)<=1:
        return True
    else:
        if niska[0]==niska[-1]:
            return rekpal(niska[1:-1])
        else:
            return False
#===================================================================

#===================================================================
#Zadatak  12
# Написати функциjу коjа проверава да ли jе произвољна реченица палиндром.
# Тражи се рекурзивно решење.

def palindrom(n):
    def niska(n):
        resenje=''
        n.lower()
        for i in n:
            if i.isalpha():
                resenje+=i 
        return resenje 
    def pal(niska):
        if len(niska)<=1:
            return True
        else:
            if niska[0]==niska[-1]:
                return rekpal(niska[1:-1])
            else:
                return False
    return pal(niska(n))
#===================================================================


#===================================================================
#Zadatak  13
#Написати процедуру коjа прима позитивну целоброjну вредност n, а враћа укупан броj кругова коjи се налази унутар петоугаоног облика у n-тоj итерациjи.
def rekkrugovi(n):
    if n==1:
        return n*5
    else:
        return n*5+rekkrugovi(n-1)
def iterkrug(n):
    resenje=0
    while n>0:
        resenje+=n*5
        n-=1 
    return resenje
#===================================================================
   
#===================================================================
#Zadatak  14
#Написати функцију која враћа број самогласникa у ниски.
def iterglasnik(niska):
    samoglasnici='aeiou'
    niska.lower()
    broj=0
    for i in niska:
        if i in samoglasnici:
            broj+=1 
    return broj
        
def rekglasnik(niska):
    if len(niska)==1:
        if niska in 'aeiou':
            return 1 
        else:
            return 0
    else:
        return rekglasnik(niska[0])+ rekglasnik(niska[1:])
#===================================================================   
    
    
#===================================================================
#Zadatak  15
#Написати функцију која враћа број појављивања цифара у ниски. Тражи се рекурзивно решење.
def rekcifre(niska):
    if len(niska)==1:
        if niska.isalpha():
            return 1 
        else:
            return 0 
    else:
        return rekcifre(niska[0])+rekcifre(niska[1:])
#===================================================================   
    

#===================================================================
#Zadatak  16
#Написати функцију коjа прима две ниске произвољних дужина, а враћа ниску коjа садржи испреплетане чланове улазних ниски почевши од прве. За случаj да су дужине улазних ниски различите, одговараjући чланови дуже ниске биће придружени на краjу резултуjуће ниске.
def isprepleteni(niska1,niska2):
    if niska1=="":
        return niska1
    if niska2=="":
        return niska2
    return niska1[0]+niska2[0]+isprepleteni(niska1[1:],niska2[1:])
def iterprep(niska1,niska2):
    resenje=""
    i=0
    while i<len(niska1) and i<len(niska2):
        resenje+=niska1[i]+niska2[i]
        i+=1
    resenje+=niska1[i:]+niska2[i:]
    return resenje
    
        
        
    
        
    






#===================================================================
















    
    
    
    
    
    