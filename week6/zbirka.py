#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 26 21:17:53 2025

@author: alex
"""

def ispisati(x):
    print("#===================================================================")
    print("#Zadatak ", x)
    
    
    print("#===================================================================")
    
#===================================================================
#Zadatak  1
# Задатак: Бројеви од a до b
# Ако су дати цели бројеви a и b, написати програм који исписује редом све целе бројеве у задатом интервалу
# [a, b].
# Улаз: У првој линији стандардног улаза налази се цео број a, а у другој је цео број b (−1000 ≤ a ≤
# 1000, −1000 ≤ b ≤ 1000).
# Излаз: На стандардном излазу исписују се редом сви цели бројеви из интервала, у свакој линији по један
# број.
# Пример
# Улаз
# 3
# 6
# Излаз
# 3
# 4
# 5
# 6
# a=int(input('ceo broj a:'))
# b=int(input('ceo broj b:'))
# for i in range(a,b+1):
#     print(i)
#===================================================================    
    
    
    
#===================================================================
#Zadatak  2
# Задатак: Бројање у игри жмурке
# У игри жмурке деца обично броје по пет (5, 10, 15, 20, . . .). Напиши програм који исписује баш те бројеве.
# Улаз: Са стандардног улаза уноси се број x (100 ≤ x ≤ 1000) дељив са 5.
# Излаз: На стандардни излаз исписати бројеве дељиве са 5, почевши од 5 и завршивши са x. Сваки број
# исписати у посебном реду.
# Пример
# Улаз
# 30
# Излаз
# 5
# 10
# 15
# 20
# 25
# 30

# a=int(input('ceo broj a:'))
# i=5
# while i<=a:
#     print(i)
#     i+=5
#===================================================================   
    
#===================================================================
#Zadatak  3
# Задатак: Троцифрени парни бројеви
# За дате целе бројеве a и b, написати програм који исписује редом све парне троцифрене бројеве који припадају датом интервалу [a, b]
# Улаз: Са стандардног улаза учитавају се бројеви a и b (0 ≤ a ≤ 1500 и a ≤ b ≤ 1500).
# Излаз: На стандардном излазу исписују се редом (од најмањег до највећег) сви парни троцифрени бројеви,
# у свакој линији по један број.
# Пример
# Улаз
# 85
# 109
# Излаз
# 100
# 102
# 104
# 106
# 108

# a=int(input('ceo broj a ')); b=int(input('ceo broj b '))
# i=a
# while i<=b:
#     if i//100 != 0 and i%2==0 and i<=999:
#         print(i)
#     i+=1
#===================================================================    
    
#===================================================================
#Zadatak  4
# Задатак: Одбројавање уназад
# Написати програм који одбројава уназад од датог броја до нуле.
# Улаз: Са стандардног улаза уноси се природан број a мањи од 100 од којег почиње одбројавање.
# Излаз: На стандардном излазу исписују се редом (од највећег до најмањег) сви бројеви од a до нуле. Сваки
# број приказати у посебној линији.
# Пример
# Улаз
# 3
# Излаз
# 3
# 2
# 1
# 0
# a=int(input('cela vrednost a '))
# for i in range(a,-1,-1):
#     print(i)
#===================================================================    
    
    
#===================================================================
#Zadatak  5
# Задатак: Најаве емисије у правилним временским интервалима
# Познат је почетак и крај једног филма (времена у сатима и минутима). У правилним временским интервалима, прво на почетку филма и затим након сваких m минута у углу екрана се приказује најава следеће емисије.
# Напиши програм који исписује времена у којима се приказује та најава.
# Улаз: На стандардном улазу налази се време почетка филма дато у облику два цела броја, сваког у засебној
# линији који представљају број сати и број минута, затим, у следеђој линији време завршетка филма дато у
# истом облику и на крају један цео број који представља интервал у минутима у којем се приказује најава.
# Излаз: На стандардном излазу приказати, времена емитовања најаве у облику h:m, свако у засебном реду.
# Пример
# Улаз
# 12
# 0
# 13
# 23
# 15
# Излаз
# 12:0
# 12:15
# 12:30
# 12:45
# 13:0
# 13:15

# h1=int(input('sat pocetka filma '))
# m1=int(input('minut pocetka filma '))
# h2=int(input('vreme zavrsetka filma '))
# m2=int(input('minut zavrsetka filma '))
# p=int(input('inerval najave '))

# i=h1

# while i<=h2:
#     if i==h1:
#         for q in range(m1,60,p):
#             print(i,':',q)
#     if i==h2:
#         for q in range(0,m2,p):
#             print(i,':',q)
#     i+=1

#bolje resenje
# pocetak = h1 * 60 + m1
# kraj = h2 * 60 + m2

# trenutak = pocetak
# while trenutak <= kraj:
#     print(trenutak // 60, ":", trenutak % 60)
#     trenutak += p
#===================================================================    
    
#===================================================================
#Zadatak  6
# Задатак: Подела интервала на једнаке делове
# Написати програм којим се исписују вредности n равномерно размакнутих реалних бројева из интервала
# [a, b], тако да је прва вредност a, а последња b.
# Улаз: Прва линија стандардног улаза садржи природан број n (1 < n ≤ 20), друга линија садржи реалан
# број a, а трећа линија реалан број b, при чему је a < b.
# Излаз: На стандардном излазу приказати редом тражене бројеве, заокружене на пет децимала, сваки у посебној линији.
# Пример
# Улаз
# 5
# -1
# 1
# Излаз
# -1.00000
# -0.50000
# 0.00000
# 0.50000
# 1.00000

# n=int(input('n'))
# a=int(input('pocetak '))
# b=int(input('kraj '))
# i=a
# x=(b-a)/(n-1)
# while i<=b:
#     print(format(i,'.5f'))
#     i+=x
#===================================================================    
    
#===================================================================
#Zadatak  7
# Задатак: Геометријска серија
# Написати програм који за дате природне бројеве a, b исписује бројеве из интервала [a, b], од којих је први
# број који се исписује једнак a, а сваки следећи је три пута већи од претходног. На пример, за [a, b] = [5, 50]
# треба исписати 5, 15, 45.
# Улаз: Са стандардног улаза се учитавају природни бројеви a (1 ≤ a ≤ 50) и b (a ≤ b ≤ 10000 ) сваки у
# посебном реду.
# Излаз: На стандардном излазу исписују се сви тражени бројеви, редом (од најмањег до највећег). Сваки
# број исписати у посебној линији.
# Пример
# Улаз
# 5
# 50
# Излаз
# 5
# 15
# 45

# a=int(input('pocetak intervala '))
# b=int(input('kraj intervala '))
# i=a
# while i<=b:
#     print(i)
#     i=i*3
#===================================================================    
    
#===================================================================
#Zadatak  8
# Задатак: Збир n бројева
# Написати програм којим се одређује збир n датих целих бројева.
# Улаз: У првој линији стандардног улаза налази се природан број n (1 ≤ n ≤ 1000). У свакој од наредних n
# линија налази се по један цео број xi
# .
# Излаз: У првој линији стандарног излаза приказати збир унетих n целих бројева x1, . . . , xn.
# Пример
# Улаз
# 4
# 10
# -3
# 2
# 4
# Излаз
# 13

# n=list(map(int,input('unesite brojeve ').split()))
#n.pop(0)
# print(sum(n))
# brojevi=[]
# n=int(input('koliko brojeva hoces upisati '))
# for i in range(n):
#     brojevi.append(int(input('broj koji zelis ubaciti')))
# print(sum(brojevi))
#===================================================================   
    
#===================================================================
#Zadatak  9
# Задатак: Читање до нуле
# Уносе се цели бројеви док се не унесе нула. Написати програм којим се приказује колико је унето бројева,
# не рачунајући нулу.
# Улаз: Свака линија стандардног улаза, изузев последње, садржи цео број различит од нуле. Последња линија
# садржи нулу.
# Излаз: На стандардном излазу у првој линији приказати колко је учитано бројева, не рачунајући нулу.
# Пример 1
# Улаз
# 5
# -675
# 123
# 0
# Излаз
# 3
# Пример 2
# Улаз
# 0
# Излаз
# 0

# i=0
# while True:
#     broj=int(input('unesi neki broj '))
#     if broj==0:
#         break 
#     i+=1
# print(i)
#===================================================================
    
#===================================================================
#Zadatak  10
# Задатак: Читање до краја улаза
# Са улаза се уносе цели бројеви све док се не дође до краја улаза. Написати програм којим се приказује колико
# је унето бројева.
# Улаз: Свака линија стандардног улаза садржи по један цео број. НАПОМЕНА: приликом интерактивног
# тестирања програма, крај стандардног улаза се означава комбинацијом тастера ctrl + z ако се користи
# оперативни систем Windows тј. ctrl + d aко се користи оперативни систем Linux.
# Излаз: У првој линији стандардног излаза приказати колико је бројева унето.
# Пример
# Улаз
# 20
# 145
# -23
# -12
# Излаз
# 4

# brojevi=list(map(int,input('brojevi ').split()))
# print(len(brojevi))
# import sys
# broj = 0
# for linija in sys.stdin:
#     broj = broj + 1
# print(broj)
#===================================================================    
    
    
#===================================================================
#Zadatak  11
# Задатак: Читање до -1 или до n-тог броја
# Пера се током часа играо и сецкао квадрате од папира. Учитељица је то приметила и дала му је задатак да
# израчуна укупну површину свих квадрата које је исекао. Напиши програм који Пери помаже да то уради.
# Пера, на самом почетку уноси број n за који је сигуран да је већи или једнак броју квадратића. Након
# тога, уноси највише n бројева који представљају дужине страница квадратића, при чему, ако примети да
# квадратића има мање од броја n, он уноси −1, чиме означава да је потребно прекинути унос.
# Улаз: Са стандардног улаза се учитава број n (0 ≤ n ≤ 15), а затим m (1 ≤ m ≤ n) целих бројева између 1
# и 10, при чему, ако је m < n, онда се након њих уноси −1.
# Излаз: На стандардни излаз исписати један цео број који представља укупну површину свих квадрата.
# Пример 1
# Улаз
# 3
# 1
# 2
# 3
# Излаз
# 14
# Пример 2
# Улаз
# 5
# 1
# 2
# 3
# -1
# Излаз
# 14
# n=int(input('maksimalan broj stranica: '))
# povrsine=0
# while n>0:
#     broj=int(input('stranica '))
#     if broj==-1:
#         break
#     povrsine+=broj*broj 
#     n-=1
# print(povrsine) 
#===================================================================    
    
#===================================================================
#Zadatak  12
# Задатак: Прерачунавање миља у километре
# Миља је енглеска историјска мера за дужину која износи 1609.344 m. Напиши програм који исписује таблицу
# прерачунавања миља у километре.
# Улаз: Са стандардног улаза се уносе цели бројеви a (1 ≤ a ≤ 10), b (10 ≤ b ≤ 100) и k (1 ≤ k ≤ 10).
# Излаз: На стандардни излаз исписати табелу конверзије миља у километре за сваки број миља из интервала
# [a, b], са кораком k. Број километара заокружити на 6 децимала, а табелу приказати у формату идентичном
# као у примеру.
# Пример
# Улаз
# 10
# 20
# 2
# Излаз
# 10 mi = 16.093440 km
# 12 mi = 19.312128 km
# 14 mi = 22.530816 km
# 16 mi = 25.749504 km
# 18 mi = 28.968192 km
# 20 mi = 32.186880 km

# a=int(input('pocetak intervala milje '))
# b=int(input('kraj intervala milje '))
# k=int(input('korak '))
# for km in range(a,b+1,k):
#     izraz=km*1.609344 
#     print(km,' mi = ',format(izraz,'.6f'),' km')
#=================================================================== 
    
#===================================================================
#Zadatak  13
# Задатак: Табелирање функције
# Аутомобил се креће равномерно убрзано са почетном брзином v0 (израженом у m
# s
# ) и убрзањем a (израженим
# у
# m
# s
# 2 ). Укупно време до постизања максималне брзине је T секунди. На сваких ∆t секунди од почетка потребно је израчунати пређени пут аутомобила. Напомена: за равномерно убрзано кретање пређени пут након
# протеклог времена t изражава се са s = v0 · t +
# a·t
# 2
# 2
# .
# Улаз: Са стандардног улаза учитавају се 4 реална броја (сваки је у посебном реду):
# • v0 (0 ≤ v0 ≤ 5) - почетна брзина
# • a (1 ≤ a ≤ 3) - убрзање
# • T (5 ≤ T ≤ 10) - укупно време
# • ∆t (0.1 ≤ ∆t ≤ 2.5) - интервал
# Излаз: На стадардни излаз исписати серију бројева који представљају пређени пут у задатим тренуцима.
# Пример
# Улаз
# 1
# 1
# 2
# 0.5
# Излаз
# 0.00000
# 0.62500
# 1.50000
# 2.62500
# 4.00000

# v0=float(input('pocetna brzina auta '))
# a=float(input('ubrzanje auta '))
# T=float(input('ukupno vreme do dostizanja maksimalne brzine '))
# t=float(input('intervali '))
# i=0
# while i<=T:
#     s=v0*i+(a*(i**2))/2 
#     print(format(s,'.6f'))
#     i=i+t
#=================================================================== 
    
#===================================================================
#Zadatak  14
# Задатак: Факторијел
# Дате су цифре 1, 2, . . . , n. Напиши програм који израчунава колико се различитих n-тоцифрених бројева
# састављених од свих тих цифара може направити (на пример, од цифара 1, 2, 3 могу се направити бројеви
# 123, 132, 213, 231, 312 и 321).
# 133
# ГЛАВА 4. ИТЕРАЦИЈА
# Напомена: Број пермутација скупа од n елемената једнак је факторијелу броја n тј. броју n! = 1 · 2 · . . . · n.
# Размисли зашто је баш тако.
# Улаз: Прва линија стандарног улаза садржи природан број n (1 ≤ n ≤ 9).
# Излаз: У првој линији стандарног излаза приказати број различитих бројева који се могу направити од
# цифара 1, 2, . . . , n.
# Пример 1
# Улаз
# 5
# Излаз
# 120
# Пример 2
# Улаз
# 9
# Излаз
# 362880

# broj=int(input('broj za faktorisanje '))
# resenje=1
# while broj>0:
#     resenje*=broj 
#     broj-=1 
#     print(resenje)
# print(resenje)
#===================================================================
    
 
#===================================================================
#Zadatak  15
#Задатак: Степен
# Напиши програм који израчунава степен x
# n. Покушај да програм напишеш без употребе библиотечких функција и оператора за степеновање.
# Улаз: Са стандардног улаза се уноси реалан број x (0.8 ≤ x ≤ 1.2) и цео број n (0 ≤ n ≤ 20).
# Излаз: На стандардни излаз испиши вредност x
# n заокружену на пет децимала.
# Пример
# Улаз
# 1.1
# 5
# Излаз
# 1.6105

# x=float(input('broj za stepenovanje '))
# n=int(input('stepen '))
# resenje=1
# while n>0:
#     resenje=resenje*x
#     n-=1 
# print(format(resenje,'.5f'))
#===================================================================   
 
    
#===================================================================
#Zadatak  16
# Задатак: Просек свих бројева до краја улаза
# Са стандардног улаза се учитава број поена такмичара на такмичењу из програмирања. Напиши програм
# који израчунава просечан број поена свих такмичара.
# Улаз: Сваки ред стандардног улаза садржи један цео број између 0 и 100. НАПОМЕНА: приликом интерактивног тестирања програма, крај стандардног улаза се означава комбинацијом тастера ctrl + z ако се
# користи оперативни систем Windows тј. ctrl + d aко се користи оперативни систем Linux.
# Излаз: На стандардни излаз исписати просек заокружен на 5 децимала.
# Пример
# Улаз
# 1
# 2
# 3
# 4
# Излаз
# 2.50000
# niska=[]
# try:
#     while True:
#         niska.append(int(input('unesite broj')))
# except:
#      print(sum(niska)/len(niska))
#===================================================================
    
#===================================================================
#Zadatak  17
# Задатак: Средине
# Aутомобил путује мењајући брзину током путовања. Познато је да се један део пута кретао равномерно
# брзином v1
# km
# h
# , затим се један део пута кретао равномерно брзином v2
# km
# h
# , и тако даље, све до последњег
# дела пута где се кретао равномерно брзином од vn
# km
# h
# . Написати програм који одређује просечну брзину
# аутомобила на том путу и то:
# • ако се претпостави да је сваки део пута трајао исто време,
# • ако се претпостави да је на сваком делу пута аутомобил прешао исто растојање.
# Улаз: Са стандардног улаза уноси се n (2 ≤ n ≤ 10) позитивних реалних бројева: v1, v2, …, vn (za svako vi
# важи 30 ≤ vi ≤ 120), након чега следи крај улаза.
# Излаз: У првој линији стандардног излаза исписати реалан број заокружен на 2 децимале који представља
# просечну брзину под претпоставком да је сваки део пута трајао исто време, а у другом реду реалан број
# заокружен на 2 децимале који представља просечну брзину под претпоставком да је на сваком делу пута
# аутомобил прешао исто растојање.
# Пример
# Улаз
# 60
# 40
# Излаз
# 50.00
# 48.00

# brzine=[]
# while len(brzine)<=10:
#     try:
    
#         brzine.append(int(input('brzina ')))
#     except:
#         break

# arit=sum(brzine)/len(brzine)
# harmonija=[1/v for v in brzine]
# harm=len(brzine)/sum(harmonija)
# print(f'{arit:.2f}')
# print(f'{harm:.2f}')
#===================================================================
    
#===================================================================
#Zadatak  18
# Задатак: Просечан раст цена
# Потрошачка корпа је коштала 60000 динара. Након годину дана цене су порасле 21 проценат и потрошачка
# корпа је коштала 72600 динара. Након друге године цене су порасле још 44 процента и потрошачка корпа је
# коштала 104544 динара. Поставља се питање колико је просечно годишње порасла цена потрошачке корпе.
# Дефинишимо да ће просечан проценат пораста цене бити онај који, када се примени након сваке године,
# на крају дати исту цену као и у случају полазних пораста цена. У нашем примеру, ако би цена порасла 32
# процента након годину дана потрошачка корпа би коштала 79200 динара, и ако би након друге године порасла

# још 32 процента, на крају би коштала поново тачно 104544 динара, тако да кажемо да је просечан пораст цене
# 32 процента. Напиши програм који за дате појединачне проценте пораста цене након сваке године израчунава
# просечан проценат пораста цене током целог периода.
# Улаз: Са стандардног улаза се уноси број n (важи 2 ≤ n ≤ 10) а затим n реалних бројева p1, p2, . . . , pn који
# представљају проценте раста цене на крају сваке године (за свако pi важи да је 5 ≤ pi ≤ 50).
# Излаз: На стандардни излаз приказати један реалан број заокружен на две децимале који представља просечан проценат пораста цене.
# Пример 1
# Улаз
# 2
# 21
# 44
# Излаз
# 32.00
# Пример 2
# Улаз
# 5
# 47.0
# 13.0
# 13.5
# 26.5
# 16.5
# Излаз
# 22.68

# import math
# n = int(input()) # broj godina
# # učitavamo procenat rasta za svaku godinu i
# # izračunavamo proizvod koeficijenata rasta
# proizvod = 1.0
# for i in range(n):
#     pi = float(input()) # procenat rasta u tekućoj godini
#     proizvod = proizvod * (1.0 + pi / 100.0)
# # izračunavamo i ispisujemo prosečno poskupljene
# prosecno_poskupljenje = 100.0 * (math.pow(proizvod, 1.0 / n) - 1.0)
# print(format(prosecno_poskupljenje, '.2f'))

#===================================================================


#===================================================================
#Zadatak  19
# Задатак: Производња малина
# Власник имања, Маринко, одлучио је да гаји малине. Направио је план за n година. Прве године планира да
# произведе t тона малина, а сваке следеће да повећа производњу за p%. Написати програм којим се одређује
# колико тона малина Маринко планира да произведе n-те године узгајања малина.
# Улаз: Прва линија стандардног улаза садржи природан број n (n ≤ 10) број планираних година. Друга и
# трећа линија стандардног улаза садрже по један реалан број, који редом представљају колико тона малина
# Маринко планира да произведе прве године t (0 < t < 5) и за колико процената Маринко планира да повећа
# производњу сваке године p (10 ≤ p ≤ 50).
# Излаз: На стандардном излазу приказати, на две децимале, колико тона малина Маринко планира да произведе n-те године узгајања малина.
# Пример
# Улаз
# 5
# 2
# 25
# Излаз
# 4.88

# n=int(input('koliko godina marinsko mastara: '))
# t=int(input('koliko tona ce da ima prve godine '))
# p=int(input('za koliko procenata planira da poveza proizvodnju do te godine '))
# broj=t
# while n>1:
#     broj=broj+broj*(p/100)
#     n-=1
# print(format(broj,'.2f'))
#===================================================================

#===================================================================
#Zadatak  20
# Задатак: Сума низа бројева
# Професор математике је поставио следећи задатак:
# Одредити суму n бројева, ако је први број дати број a, а сваки следећи број добија се тако што претходни
# број помножимо са датим бројем q.
# Ученик који први реши задатак добија петицу. Помозите ученицима, напишите програм којим се за дати
# природан број n, и дате реалне бројеве a и q одређује тражена сума.
# Улаз:
# • Прва линија стандардног улаза садржи природан број n (n ≤ 50).
# • Друга линија стандардног улаза садржи реалан број a (0 < a ≤ 10).
# • Трећа линија стандардног улаза садржи реалан број q (0 < q < 1).
# Излаз: На стандардном излазу приказати, на пет децимала, тражену суму бројева.
# Пример
# Улаз
# 4
# 20.00
# 0.50
# Излаз
# 37.50000
# n=int(input('suma broeva '))
# a=float(input('pocetni broj '))
# q=float(input('korak '))
# suma=0
# broj=a
# while n>0:
#     suma+=broj
#     broj=broj*q
#     n-=1    
# print(f'suma je {suma:.5f}')
#===================================================================


#===================================================================
#Zadatak  21
# Задатак: Једнакост растојања
# Становници једне дугачке улице желе да одреде положај на којем ће бити направљена антена за мобилну
# телефонију. Пошто желе да локацију одреде на најправеднији могући начин, договорили су се да антену
# саграде на месту на ком ће збир растојања свих оних који се налазе лево од антене до ње, бити једнак збиру
# растојања свих оних који се налазе десно од антене до ње. Ако су познате координате свих кућа у улици
# (можемо замислити да су то координате тачака на једној правој), напиши програм који одређује положај
# антенте.
# Улаз: Са стандардног улаза у првој линији се уноси природан број n (1 ≤ n ≤ 100) који представља број
# станара, а у наредних n линија реални бројеви (од −1000 до 1000) који представљају координате станара (x
# координате тачака на оси).
# Излаз: На стандардни излаз исписати један реалан број који представља тражени положај антене (допуштена
# је толеранција грешке 10−5
# ).
# Пример
# Улаз
# 5
# -7.34
# 15.6
# 3.67
# -22.17
# 6.2
# Излаз
# -0.80800

# n = int(input())
# kuce = [float(input()) for _ in range(n)]

# # Inicijalizujemo vrednosti
# najbolje_mesto = None
# najmanja_razlika = float('inf')

# # Probamo svaku moguću tačku od -1000 do 1000 (sa korakom 0.001)
# x = -1000.0
# while x <= 1000.0:
#     levo = sum(abs(k - x) for k in kuce if k < x)
#     desno = sum(abs(k - x) for k in kuce if k > x)
#     razlika = abs(levo - desno)

#     # Ako je ova razlika najmanja do sad, zapamti ovo mesto
#     if razlika < najmanja_razlika:
#         najmanja_razlika = razlika
#         najbolje_mesto = x

#     x += 0.001

# # Ispis rezultata sa 5 decimala
# print(f"{najbolje_mesto:.5f}")

#===================================================================

#===================================================================
#Zadatak  22
# Задатак: Тежиште
# Тежиште T троугла ABC је пресек његових тежишних дужи. Та тачка има и друга занимљива својства. На
# пример, када бисмо изрезали троугао од папира, могли бисмо да га балансирамо на врху оловке, само ако
# бисмо оловку поставили у тежиште троугла. Такође, тежиште је тачка таква да је збир квадрата растојања
# између ње и темена троугла (тј. израз |AT|
# 2+|BT|
# 2+|CT|
# 2
# ) најмањи могућ. Уједно, то је једина тачка таква
# 138
# 4.2. ОСНОВНИ АЛГОРИТМИ НАД СЕРИЈАМА ЕЛЕМЕНАТА
# да је збир вектора −→AT +
# −→BT +
# −→CT =
# −→0 . Користећи последње поменуто својство, појам тежишта се може
# уопштити на произвољан коначан скуп тачака (тада се понекад назива и барицентар или центроид). Напиши
# програм који за n тачака равни задатих својим координатама одређује њихово тежиште.
# Улаз: Са стандардног улаза учитава се број 3 ≤ n ≤ 100 и затим 2n парова реалних бројева (xi
# , yi), при
# чему је сваки број у посебном реду, који представљају координате n тачака равни.
# Излаз: На стандардни излаз исписати координате тежишта тог скупа тачака, прво координату x, затим координату y, сваку у посебном реду, заокружену на пет децимала.
# Пример
# Улаз
# 3
# 0
# 0
# 0
# 1
# 1
# 0
# Излаз
# 0.33333
# 0.33333

# n=int(input('neki dug '))
# xzbir=0
# yzbir=0
# for i in range(n):
#     x=int(input('x koordinata'))
#     y=int(input('y koordinata '))
#     xzbir+=x
#     yzbir+=y 
# print(format(xzbir/n,'.5f'))
# print(format(yzbir/n,'.5f'))
#===================================================================

#===================================================================
#Zadatak  23
# Задатак: Бројеви дељиви са 3
# Напиши програм који међу унетим бројевима одређује и исписује оне који су дељиви са 3.
# Улаз: Са стандардног улаза се најпре учитава природан број n (1 ≤ n ≤ 1000), а потом и n природних
# бројева из интервала [1, 108
# ], сваки у посебном реду.
# Излаз: На стандардни излаз исписати све учитане бројеве који су дељиви са 3 (у истом редоследу у ком су
# учитани). Сваки број исписати у посебној линији.
# Пример
# Улаз
# 5
# 100
# 11
# 12
# 18
# 102
# Излаз
# 12
# 18
# 102

# n=int(input('ukupno brojeva '))
# brojev=[]
# for i in range(n):
#     broj=int(input('broj '))
#     if broj%3==0:
#         brojev.append(broj)
# for x in brojev:
#     print(x)
#===================================================================

#===================================================================
#Zadatak  24
# Задатак: Бројање гласова за омиљеног глумца
# Ученици су бирали свог омиљеног глумца. Напиши програм који Ђоки помаже да сазна колико је гласова
# добио његов омиљени глумац.
# Улаз: Сваки глумац је означен природним бројем од 1 до 10. Прва линија стандардног улаза садржи редни
# број x Ђокиног омиљеног глумца. Друга линија стандардног улаза садржи природан број n (1 ≤ n ≤ 100) -
# број ученика у школи. Наредних n линија садрже гласове сваког ученика (бројеве од 1 до 10, сваки у посебном
# реду).
# Излаз: На стандардни излаз исписати један природан број - број гласова које је добио глумац x.
# 140
# 4.2. ОСНОВНИ АЛГОРИТМИ НАД СЕРИЈАМА ЕЛЕМЕНАТА
# Пример
# Улаз
# 2
# 4
# 1
# 2
# 3
# 2
# Излаз
# 2

# x=int(input('omiljeni glumac djoke '))
# n=int(input('broj glasova '))
# i=0
# for g in range(n):
#     broj=int(input('glumac '))
#     if broj==x:
#         i+=1
# print(i)
#===================================================================

#===================================================================
#Zadatak  25
# Задатак: Просек одличних
# Дате су просечне оцене n ученикa једног одељења. Написати програм којим се одређује просек просечних
# оцена свих одличних ученика тог одељења.
# Улаз: Прва линија стандарног улаза садржи природан број n (1 ≤ n ≤ 100) који представља број ученика.
# У наредних n линија налази се по један реалан број из интервала [2, 5]. Ти бројеви представљају просеке
# ученика.
# Излаз: У првој линији стандарног излаза приказати просек просечних оцена одличних ученика одељења
# заокружен nа две децимале. Ако одличних ученика нема приказати -.
# Пример 1
# Улаз
# 4
# 3.5
# 4.75
# 3
# 4.5
# Излаз
# 4.62
# Пример 2
# Улаз
# 4
# 3.5
# 3.75
# 2.80
# 4.35
# Излаз
#-
# n=int(input('prosek koliko ucenika '))
# suma=0
# odlicni=0
# for _ in range(n):
#     prosek=float(input('prosek ucenika '))
#     if prosek>=4.5:
#         suma+=prosek
#         odlicni+=1
# try:
#     prosecno=suma/odlicni
#     print(format(prosecno,'.2f'))
    
# except:
    
#     print('-')
#=================================================================


#===================================================================
#Zadatak  26
# Задатак: Категорије џудиста
# На једном турниру џудисти се такмиче у три категорије: до 50 килограма, од 51 до 75 килограма и од 76
# килограма навише. Напиши програм који учитава број џудиста једног клуба пријављеног на тај турнир, а
# затим тежину сваког од њих и за сваку категорију редом исписује колико ће се џудиста тог клуба борити у тој
# категорији.
# Улаз: Са стандардног улаза се учитава број џудиста n (1 ≤ n ≤ 100), а затим у n наредних редова тежине
# џудиста (цели бројеви између 30 и 120).
# Излаз: На стандардни излаз исписати три броја, сваки у посебном реду: број џудиста који имају мање или
# једнако од 50 килограма, број џудиста који имају између 51 и 75 килограма и број џудиста који имају више
# или једнако од 76 килограма.
# Пример
# Улаз
# 5
# 48
# 51
# 73
# 82
# 50
# Излаз
# 2
# 2
# 1
# n=int(input('broj judasa lady gaga '))
# mala=0
# srednja=0
# visa=0
# for _ in range(n):
#     broj=int(input('tezina judasa '))
#     if broj<=50:
#         mala+=1 
#     elif 51<=broj<=75:
#         srednja+=1 
#     else:
#         visa+=1 
# print(mala)
# print(srednja)
# print(visa)
#===================================================================


#===================================================================
#Zadatak  27
# Задатак: Статистике33
# Чувени кошаркаш Дабло Трипловић има толико добре статистике, да се већ помало сумња да су његови успеси
# добро пребројани.
# Написати програм који одређује колико пута је Трипловић постигао такозвани трипл–дабл.
# Улаз: На стандардноим улазу се у првом реду налази цео број N, (1 ≤ N ≤ 100), број утакмица које је
# Трипловић одиграо у сезони. У сваком од следећих N редова по 3 цела броја раздвојена по једним размаком:
# број поена, скокова и асистенција редом (ови бројеви нису већи од 1000).
# Излаз: На стандардни излаз исписати један број, број утакмица на којима је Трипловић постигао трипл–
# дабл.
# Напомена
# За потребе овог задатка трипл–дабл дефинишемо као најмање двоцифрен учинак (10 или више) у све три
# категорије које се прате. Другим речима: сва три броја већа од 9 у једном реду улаза.
# Пример
# Улаз
# 3
# 20 9 7
# 127 12 11
# 11 14 12
# Излаз
# 2

# n=int(input('broj utakmica koji je cuveni gospodin Dablo Triplovic izdriblao '))
# dabl=0 
# for _ in range(n):
#     b1,b2,b3=map(int,input('3 broja poena u utakmici ').split())
#     if b1>=10 and b2>=10 and b3>=10:
#         dabl+=1 
# print(dabl)
#===================================================================

#===================================================================
#Zadatak  28
# Задатак: Секција
# У школи је велико интересовање за програмерску секцију, на којој ће се правити рачунарске игре. Наставник је поставио услов да на секцију могу да иду само они ученици који имају 5 из информатике и бар 4 из
# математике.
# Написати програм који одређује колико ученика може да се пријави за секцију.
# Улаз: у првом реду број N, број ученика заинтересованих за секцију, природан број не већи од 200. У сваком
# од следећих N редова низ оцена једног од заинтересованих ученика из свих 11 предмета редом, раздвојени
# по једним размаком. Оцена из математике је шеста, а из информатике девета у низу од 11 цифара.
# Излаз: На стандардни излаз исписати један цео број, број ученика који испуњавају услов.
# Пример 1
# Улаз
# 4
# 5 5 5 5 5 3 5 5 4 5 5
# 5 5 5 5 5 4 5 5 4 5 5
# 5 5 5 5 5 4 5 5 5 5 5
# 2 2 2 2 2 5 2 2 5 2 2
# Излаз
# 2
# Пример 2
# Улаз
# 2
# 5 5 5 5 5 5 5 5 4 5 5
# 5 5 5 5 5 3 5 5 5 5 5
# Излаз
# 0
# n=int(input('broj ucenika zainteresovano za moju kompaniju '))
# zaposlenih=0 
# while n>0:
#     ocene=list(map(int,input('11 predmeta').split()))
#     assert len(ocene)==11, 'nisu svi predmeti '
#     if ocene[5]>=4 and ocene[8]==5:
#         zaposlenih+=1 
#     n-=1
# print(zaposlenih)
#===================================================================

#===================================================================
#Zadatak  29
# Задатак: Купци
# Менаџер једног великог ланца продавница жели да зна структуру прихода. Он је зато све куповине разврстао
# у мале, средње и велике на следећи начин: ако је износ рачуна за неку куповину X, та куповина се сматра за
# малу ако је X ≤ M, за средњу ако је M < X ≤ V , а за велику ако је V < X. Менаџер жели да за посматрани
# период зна колики је укупан приход продавница од малих, средњих и велилких куповина редом.
# Улаз: Са стандардног улаза се у првом реду учитавају бројеви M и V (1 ≤ M < V ≤ 100000). У другом
# реду је цео број n, укупан број куповина у свим продавницама у посматраном периоду (1 ≤ n ≤ 50). У
# трећем и последњем реду су исноси рачуна за n куповина, цели позитивни бројеви до 200000 раздвојени по
# једним размаком.
# Излаз: Три цела броја, сваки у посебном реду. Ови бројеви су укупни приходи од малих, средњих и великих
# куповина.
# Пример
# Улаз
# 100 1000
# 5
# 88 1010 512 100 2500
# Излаз
# 188
# 512
# 3510
# m,v=map(int,input('mala prodaja i velika prodaja ').split())
# n=int(input('broj kupovina '))
# kupovine=list(map(int,input('kupovine ').split()))
# assert len(kupovine)==n, 'nisu tacni ulazi'
# mala,srednja,velika=0,0,0
# for i in kupovine:
#     if i<=m:
#         mala+=i 
#     elif i<=v:
#         srednja+=i 
#     else:
#         velika+=i 
# print(mala)
# print(srednja)
# print(velika)
#===================================================================

#===================================================================
#Zadatak  30
# Задатак: Најнижа температура
# Дате су температуре у неколико градова. Написати програм којим се одређује, колика је температура у најхладнијем граду.
# Улаз: Прва линија стандардног улаза садржи природан број n (3 ≤ n ≤ 50) који представља број градова, а у свакој од наредних n линија налази се цео број t (−20 ≤ t ≤ 40) који представља температуру у
# одговарајућем граду.
# Излаз: На стандардном излазу, у једној линији, приказати температуру у најхладнијем граду.
# Пример
# Улаз
# 5
# 10
# -12
# 22
# -13
# 15
# Излаз
# -13

# n=int(input('broj gradova '))
# gradovi=[int(input('temperatura grada'))  for i in range(n)]
# print(min(gradovi))
#===================================================================

#===================================================================
#Zadatak  31
# Задатак: Најтоплији дан
# Дате су дневне температуре редом за сваки дан једне седмице. Написати програм којим се одређује редни
# број најтоплијег дана те седмице (ако их има више исписати први). Дани у седмици су нумерисани бројевима
# од 1 до 7, почев од понедељка.
# Улаз: Са стандардног улаза уноси се 7 целих бројева из интервала [−50, 50]. Сваки број је у посебном реду.
# Бројеви редом представљају температуре измерене у понедељак, уторак, среду, четвртак, петак, суботу и
# недељу.
# Излаз: На стандардном излазу исписати тражени редни број најтоплијег дана.
# Пример
# Улаз
# 27
# 32
# 28
# 27
# 32
# 31
# 29
# Излаз
# 2
# t=6
# i=1 
# best=0
# dan=int(input('prvi dan'))
# while t>0:
#     i+=1 
#     dani=int(input('ostai dani '))
#     if dan<dani:
#         dan=dani
#         best=i 
    
#     t-=1 
# print(best)
#===================================================================

#===================================================================
#Zadatak  32
# Задатак: Просек скокова
# Марко је велики обожаватељ скокова у воду и не пропушта ниједно такмичење. Скок се оцењује тако што
# сваки од n судија донесе своју оцену, а затим се најслабија и најбоља оцена одбаце и одреди се просек преосталих оцена. Написати програм којим се одређује Марков резултат на основу судијских оцена.
# Улаз: У n (2 < n ≤ 10) линија стандардног улаза налази се по један цео број из интервала [0, 10], ти бројеви
# представљају оцене које је Марко добио. Након тога долази крај улаза (он се може унети помоћу ctrl + z
# у системима Windows или ctrl + d у системима Linux).
# Излаз: У првој линији стандардног излаза приказати, на две децимале, Марков резултат.
# Пример
# Улаз
# 8
# 7
# 9
# 9
# 5
# Излаз
# 8.00


# ukupno=[]
# while True:
#     try:
#         broj=int(input('ocena sudije '))
#         ukupno.append(broj)
#     except:
#         break 
# ukupno.remove(max(ukupno))
# ukupno.remove(min(ukupno))
# print(format(sum(ukupno)/len(ukupno),'.2f'))
#===================================================================


#===================================================================
#Zadatak  33
# Задатак: Најближи датом целом броју
# Ученици једног одељења су организовали наградну игру. Победник игре је онај ученик који што боље процени колико метара је дугачка њихова учионица. Ако су две процене такве да за исти износ потцењују тј.
# прецењују дужину учионице, победник је онај ко је дао већу процену.
# Улаз: У првој линији стандардног улаза налази се цео број x (10 ≤ x ≤ 20), стварна дужина учионице, у
# другој линији природан број n (3 ≤ n ≤ 30) који представља број ученика, док следећих n линија садрже
# различите реалне бројеве xi (5 ≤ xi ≤ 30) који представљају процене ученика.
# Излаз: У првој линији стандардног излаза приказати, највећи број међу учитаним реалним бројевима који
# је најближи броју x (заокружен на две децимале).
# Пример
# Улаз
# 13.0
# 4
# 12.4
# 8.4
# 13.6
# 7.5
# Излаз
# 13.60

# def najblizi(x1,x2,x):
#     if abs(x1-x)<abs(x2-x):
#         return True
#     elif abs(x1-x)==abs(x2-x) and x1>x2:
#         return True
#     else:
#         return False
# x=int(input('duzina ucionice '))
# n=int(input('broj ucenika '))
# broj=float(input('guess ucenik  '))
# najblizix=broj
# for _ in range(1,n):
#     broj=float(input('guess ucenik '))
#     if najblizi(broj,najblizix,x):
#         najblizix=broj
# print(format(najblizix,'.2f'))
#===================================================================

#===================================================================
#Zadatak  34
# Задатак: Број максималних
# На такмичењу из математике учествује n ученика. За сваког такмичара познат је број поена које је освојио
# на такмичењу. Написати програм којим се одређује број такмичара који су постигли најбољи резултат на
# такмичењу.
# Улаз: Прва линија стандарног улаза садржи природан број n (10 ≤ n ≤ 250) који представља број ученика.
# У наредних n линија налази се по један цео број из интервала [0, 100], ти бројеви представљају поене које су
# такмичари освојили.
# Излаз: У првој линији стандарног излаза приказати укупaн број такмичара који су постигли најбољи резултат на такмичењу.
# Пример
# Улаз
# 5
# 57
# 90
# 68
# 90
# 73
# Излаз
# 2

# n=int(input('broj ucenika '))
# poeni=[int(input('broj poena ')) for i in range(n)]
# najbolji=max(poeni)
# sve=[i for i in poeni if i==najbolji]
# print(len(sve))
#===================================================================

#===================================================================
#Zadatak  35
# Задатак: Други на ранг листи
# На основу резултата такмичењу на којем је учествовало N ученика формирана је ранг листа. Ранг листа
# се формира у нерастућем поретку по резултатима, од најбољег до најлошијег резултата. Написати програм
# којим се одређује број поена такмичара који је други на ранг листи.
# Улаз: Прва линија стандардног улаза садржи природан број N (1 ≤ N ≤ 50000) који представља број
# такмичара. У свакој од наредних N линија налази се цео број из интервала [0, 50000], ти бројеви представљају
# резултате такмичара, који нису сортирани по поенима, већ по бројевима рачунара за којима су такмичари
# седели.
# Излаз: У једној линији стандардног излаза приказати број поена другог такмичара на ранг листи.
# Пример
# Улаз
# 5
# 80
# 95
# 75
# 50
# 95
# Изла
#95

# n=int(input('broj ucenika '))
# poeni=[int(input('poeni ucenika ')) for _ in range(n)]
# poeni.sort()
# print(poeni[-2])
#===================================================================




























 