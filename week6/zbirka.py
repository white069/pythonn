#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 26 21:17:53 2025

@author: alex
"""

def ispisati(x):
    print("#===================================================================")
    print("#Zadatak ", x)
    
    
    print("#===================================================================")
    
#===================================================================
#Zadatak  1
# Задатак: Бројеви од a до b
# Ако су дати цели бројеви a и b, написати програм који исписује редом све целе бројеве у задатом интервалу
# [a, b].
# Улаз: У првој линији стандардног улаза налази се цео број a, а у другој је цео број b (−1000 ≤ a ≤
# 1000, −1000 ≤ b ≤ 1000).
# Излаз: На стандардном излазу исписују се редом сви цели бројеви из интервала, у свакој линији по један
# број.
# Пример
# Улаз
# 3
# 6
# Излаз
# 3
# 4
# 5
# 6
# a=int(input('ceo broj a:'))
# b=int(input('ceo broj b:'))
# for i in range(a,b+1):
#     print(i)
#===================================================================    
    
    
    
#===================================================================
#Zadatak  2
# Задатак: Бројање у игри жмурке
# У игри жмурке деца обично броје по пет (5, 10, 15, 20, . . .). Напиши програм који исписује баш те бројеве.
# Улаз: Са стандардног улаза уноси се број x (100 ≤ x ≤ 1000) дељив са 5.
# Излаз: На стандардни излаз исписати бројеве дељиве са 5, почевши од 5 и завршивши са x. Сваки број
# исписати у посебном реду.
# Пример
# Улаз
# 30
# Излаз
# 5
# 10
# 15
# 20
# 25
# 30

# a=int(input('ceo broj a:'))
# i=5
# while i<=a:
#     print(i)
#     i+=5
#===================================================================   
    
#===================================================================
#Zadatak  3
# Задатак: Троцифрени парни бројеви
# За дате целе бројеве a и b, написати програм који исписује редом све парне троцифрене бројеве који припадају датом интервалу [a, b]
# Улаз: Са стандардног улаза учитавају се бројеви a и b (0 ≤ a ≤ 1500 и a ≤ b ≤ 1500).
# Излаз: На стандардном излазу исписују се редом (од најмањег до највећег) сви парни троцифрени бројеви,
# у свакој линији по један број.
# Пример
# Улаз
# 85
# 109
# Излаз
# 100
# 102
# 104
# 106
# 108

# a=int(input('ceo broj a ')); b=int(input('ceo broj b '))
# i=a
# while i<=b:
#     if i//100 != 0 and i%2==0 and i<=999:
#         print(i)
#     i+=1
#===================================================================    
    
#===================================================================
#Zadatak  4
# Задатак: Одбројавање уназад
# Написати програм који одбројава уназад од датог броја до нуле.
# Улаз: Са стандардног улаза уноси се природан број a мањи од 100 од којег почиње одбројавање.
# Излаз: На стандардном излазу исписују се редом (од највећег до најмањег) сви бројеви од a до нуле. Сваки
# број приказати у посебној линији.
# Пример
# Улаз
# 3
# Излаз
# 3
# 2
# 1
# 0
# a=int(input('cela vrednost a '))
# for i in range(a,-1,-1):
#     print(i)
#===================================================================    
    
    
#===================================================================
#Zadatak  5
# Задатак: Најаве емисије у правилним временским интервалима
# Познат је почетак и крај једног филма (времена у сатима и минутима). У правилним временским интервалима, прво на почетку филма и затим након сваких m минута у углу екрана се приказује најава следеће емисије.
# Напиши програм који исписује времена у којима се приказује та најава.
# Улаз: На стандардном улазу налази се време почетка филма дато у облику два цела броја, сваког у засебној
# линији који представљају број сати и број минута, затим, у следеђој линији време завршетка филма дато у
# истом облику и на крају један цео број који представља интервал у минутима у којем се приказује најава.
# Излаз: На стандардном излазу приказати, времена емитовања најаве у облику h:m, свако у засебном реду.
# Пример
# Улаз
# 12
# 0
# 13
# 23
# 15
# Излаз
# 12:0
# 12:15
# 12:30
# 12:45
# 13:0
# 13:15

# h1=int(input('sat pocetka filma '))
# m1=int(input('minut pocetka filma '))
# h2=int(input('vreme zavrsetka filma '))
# m2=int(input('minut zavrsetka filma '))
# p=int(input('inerval najave '))

# i=h1

# while i<=h2:
#     if i==h1:
#         for q in range(m1,60,p):
#             print(i,':',q)
#     if i==h2:
#         for q in range(0,m2,p):
#             print(i,':',q)
#     i+=1

#bolje resenje
# pocetak = h1 * 60 + m1
# kraj = h2 * 60 + m2

# trenutak = pocetak
# while trenutak <= kraj:
#     print(trenutak // 60, ":", trenutak % 60)
#     trenutak += p
#===================================================================    
    
#===================================================================
#Zadatak  6
# Задатак: Подела интервала на једнаке делове
# Написати програм којим се исписују вредности n равномерно размакнутих реалних бројева из интервала
# [a, b], тако да је прва вредност a, а последња b.
# Улаз: Прва линија стандардног улаза садржи природан број n (1 < n ≤ 20), друга линија садржи реалан
# број a, а трећа линија реалан број b, при чему је a < b.
# Излаз: На стандардном излазу приказати редом тражене бројеве, заокружене на пет децимала, сваки у посебној линији.
# Пример
# Улаз
# 5
# -1
# 1
# Излаз
# -1.00000
# -0.50000
# 0.00000
# 0.50000
# 1.00000

# n=int(input('n'))
# a=int(input('pocetak '))
# b=int(input('kraj '))
# i=a
# x=(b-a)/(n-1)
# while i<=b:
#     print(format(i,'.5f'))
#     i+=x
#===================================================================    
    
#===================================================================
#Zadatak  7
# Задатак: Геометријска серија
# Написати програм који за дате природне бројеве a, b исписује бројеве из интервала [a, b], од којих је први
# број који се исписује једнак a, а сваки следећи је три пута већи од претходног. На пример, за [a, b] = [5, 50]
# треба исписати 5, 15, 45.
# Улаз: Са стандардног улаза се учитавају природни бројеви a (1 ≤ a ≤ 50) и b (a ≤ b ≤ 10000 ) сваки у
# посебном реду.
# Излаз: На стандардном излазу исписују се сви тражени бројеви, редом (од најмањег до највећег). Сваки
# број исписати у посебној линији.
# Пример
# Улаз
# 5
# 50
# Излаз
# 5
# 15
# 45

# a=int(input('pocetak intervala '))
# b=int(input('kraj intervala '))
# i=a
# while i<=b:
#     print(i)
#     i=i*3
#===================================================================    
    
#===================================================================
#Zadatak  8
# Задатак: Збир n бројева
# Написати програм којим се одређује збир n датих целих бројева.
# Улаз: У првој линији стандардног улаза налази се природан број n (1 ≤ n ≤ 1000). У свакој од наредних n
# линија налази се по један цео број xi
# .
# Излаз: У првој линији стандарног излаза приказати збир унетих n целих бројева x1, . . . , xn.
# Пример
# Улаз
# 4
# 10
# -3
# 2
# 4
# Излаз
# 13

# n=list(map(int,input('unesite brojeve ').split()))
#n.pop(0)
# print(sum(n))
# brojevi=[]
# n=int(input('koliko brojeva hoces upisati '))
# for i in range(n):
#     brojevi.append(int(input('broj koji zelis ubaciti')))
# print(sum(brojevi))
#===================================================================   
    
#===================================================================
#Zadatak  9
# Задатак: Читање до нуле
# Уносе се цели бројеви док се не унесе нула. Написати програм којим се приказује колико је унето бројева,
# не рачунајући нулу.
# Улаз: Свака линија стандардног улаза, изузев последње, садржи цео број различит од нуле. Последња линија
# садржи нулу.
# Излаз: На стандардном излазу у првој линији приказати колко је учитано бројева, не рачунајући нулу.
# Пример 1
# Улаз
# 5
# -675
# 123
# 0
# Излаз
# 3
# Пример 2
# Улаз
# 0
# Излаз
# 0

# i=0
# while True:
#     broj=int(input('unesi neki broj '))
#     if broj==0:
#         break 
#     i+=1
# print(i)
#===================================================================
    
#===================================================================
#Zadatak  10
# Задатак: Читање до краја улаза
# Са улаза се уносе цели бројеви све док се не дође до краја улаза. Написати програм којим се приказује колико
# је унето бројева.
# Улаз: Свака линија стандардног улаза садржи по један цео број. НАПОМЕНА: приликом интерактивног
# тестирања програма, крај стандардног улаза се означава комбинацијом тастера ctrl + z ако се користи
# оперативни систем Windows тј. ctrl + d aко се користи оперативни систем Linux.
# Излаз: У првој линији стандардног излаза приказати колико је бројева унето.
# Пример
# Улаз
# 20
# 145
# -23
# -12
# Излаз
# 4

# brojevi=list(map(int,input('brojevi ').split()))
# print(len(brojevi))
# import sys
# broj = 0
# for linija in sys.stdin:
#     broj = broj + 1
# print(broj)
#===================================================================    
    
    
#===================================================================
#Zadatak  11
# Задатак: Читање до -1 или до n-тог броја
# Пера се током часа играо и сецкао квадрате од папира. Учитељица је то приметила и дала му је задатак да
# израчуна укупну површину свих квадрата које је исекао. Напиши програм који Пери помаже да то уради.
# Пера, на самом почетку уноси број n за који је сигуран да је већи или једнак броју квадратића. Након
# тога, уноси највише n бројева који представљају дужине страница квадратића, при чему, ако примети да
# квадратића има мање од броја n, он уноси −1, чиме означава да је потребно прекинути унос.
# Улаз: Са стандардног улаза се учитава број n (0 ≤ n ≤ 15), а затим m (1 ≤ m ≤ n) целих бројева између 1
# и 10, при чему, ако је m < n, онда се након њих уноси −1.
# Излаз: На стандардни излаз исписати један цео број који представља укупну површину свих квадрата.
# Пример 1
# Улаз
# 3
# 1
# 2
# 3
# Излаз
# 14
# Пример 2
# Улаз
# 5
# 1
# 2
# 3
# -1
# Излаз
# 14
# n=int(input('maksimalan broj stranica: '))
# povrsine=0
# while n>0:
#     broj=int(input('stranica '))
#     if broj==-1:
#         break
#     povrsine+=broj*broj 
#     n-=1
# print(povrsine) 
#===================================================================    
    
#===================================================================
#Zadatak  12
# Задатак: Прерачунавање миља у километре
# Миља је енглеска историјска мера за дужину која износи 1609.344 m. Напиши програм који исписује таблицу
# прерачунавања миља у километре.
# Улаз: Са стандардног улаза се уносе цели бројеви a (1 ≤ a ≤ 10), b (10 ≤ b ≤ 100) и k (1 ≤ k ≤ 10).
# Излаз: На стандардни излаз исписати табелу конверзије миља у километре за сваки број миља из интервала
# [a, b], са кораком k. Број километара заокружити на 6 децимала, а табелу приказати у формату идентичном
# као у примеру.
# Пример
# Улаз
# 10
# 20
# 2
# Излаз
# 10 mi = 16.093440 km
# 12 mi = 19.312128 km
# 14 mi = 22.530816 km
# 16 mi = 25.749504 km
# 18 mi = 28.968192 km
# 20 mi = 32.186880 km

# a=int(input('pocetak intervala milje '))
# b=int(input('kraj intervala milje '))
# k=int(input('korak '))
# for km in range(a,b+1,k):
#     izraz=km*1.609344 
#     print(km,' mi = ',format(izraz,'.6f'),' km')
#=================================================================== 
    
#===================================================================
#Zadatak  13
# Задатак: Табелирање функције
# Аутомобил се креће равномерно убрзано са почетном брзином v0 (израженом у m
# s
# ) и убрзањем a (израженим
# у
# m
# s
# 2 ). Укупно време до постизања максималне брзине је T секунди. На сваких ∆t секунди од почетка потребно је израчунати пређени пут аутомобила. Напомена: за равномерно убрзано кретање пређени пут након
# протеклог времена t изражава се са s = v0 · t +
# a·t
# 2
# 2
# .
# Улаз: Са стандардног улаза учитавају се 4 реална броја (сваки је у посебном реду):
# • v0 (0 ≤ v0 ≤ 5) - почетна брзина
# • a (1 ≤ a ≤ 3) - убрзање
# • T (5 ≤ T ≤ 10) - укупно време
# • ∆t (0.1 ≤ ∆t ≤ 2.5) - интервал
# Излаз: На стадардни излаз исписати серију бројева који представљају пређени пут у задатим тренуцима.
# Пример
# Улаз
# 1
# 1
# 2
# 0.5
# Излаз
# 0.00000
# 0.62500
# 1.50000
# 2.62500
# 4.00000

# v0=float(input('pocetna brzina auta '))
# a=float(input('ubrzanje auta '))
# T=float(input('ukupno vreme do dostizanja maksimalne brzine '))
# t=float(input('intervali '))
# i=0
# while i<=T:
#     s=v0*i+(a*(i**2))/2 
#     print(format(s,'.6f'))
#     i=i+t
#=================================================================== 
    
#===================================================================
#Zadatak  14
# Задатак: Факторијел
# Дате су цифре 1, 2, . . . , n. Напиши програм који израчунава колико се различитих n-тоцифрених бројева
# састављених од свих тих цифара може направити (на пример, од цифара 1, 2, 3 могу се направити бројеви
# 123, 132, 213, 231, 312 и 321).
# 133
# ГЛАВА 4. ИТЕРАЦИЈА
# Напомена: Број пермутација скупа од n елемената једнак је факторијелу броја n тј. броју n! = 1 · 2 · . . . · n.
# Размисли зашто је баш тако.
# Улаз: Прва линија стандарног улаза садржи природан број n (1 ≤ n ≤ 9).
# Излаз: У првој линији стандарног излаза приказати број различитих бројева који се могу направити од
# цифара 1, 2, . . . , n.
# Пример 1
# Улаз
# 5
# Излаз
# 120
# Пример 2
# Улаз
# 9
# Излаз
# 362880

# broj=int(input('broj za faktorisanje '))
# resenje=1
# while broj>0:
#     resenje*=broj 
#     broj-=1 
#     print(resenje)
# print(resenje)
#===================================================================
    
 
#===================================================================
#Zadatak  15
#Задатак: Степен
# Напиши програм који израчунава степен x
# n. Покушај да програм напишеш без употребе библиотечких функција и оператора за степеновање.
# Улаз: Са стандардног улаза се уноси реалан број x (0.8 ≤ x ≤ 1.2) и цео број n (0 ≤ n ≤ 20).
# Излаз: На стандардни излаз испиши вредност x
# n заокружену на пет децимала.
# Пример
# Улаз
# 1.1
# 5
# Излаз
# 1.6105

# x=float(input('broj za stepenovanje '))
# n=int(input('stepen '))
# resenje=1
# while n>0:
#     resenje=resenje*x
#     n-=1 
# print(format(resenje,'.5f'))
#===================================================================   
 
    
#===================================================================
#Zadatak  16
# Задатак: Просек свих бројева до краја улаза
# Са стандардног улаза се учитава број поена такмичара на такмичењу из програмирања. Напиши програм
# који израчунава просечан број поена свих такмичара.
# Улаз: Сваки ред стандардног улаза садржи један цео број између 0 и 100. НАПОМЕНА: приликом интерактивног тестирања програма, крај стандардног улаза се означава комбинацијом тастера ctrl + z ако се
# користи оперативни систем Windows тј. ctrl + d aко се користи оперативни систем Linux.
# Излаз: На стандардни излаз исписати просек заокружен на 5 децимала.
# Пример
# Улаз
# 1
# 2
# 3
# 4
# Излаз
# 2.50000
# niska=[]
# try:
#     while True:
#         niska.append(int(input('unesite broj')))
# except:
#      print(sum(niska)/len(niska))
#===================================================================
    
#===================================================================
#Zadatak  17
# Задатак: Средине
# Aутомобил путује мењајући брзину током путовања. Познато је да се један део пута кретао равномерно
# брзином v1
# km
# h
# , затим се један део пута кретао равномерно брзином v2
# km
# h
# , и тако даље, све до последњег
# дела пута где се кретао равномерно брзином од vn
# km
# h
# . Написати програм који одређује просечну брзину
# аутомобила на том путу и то:
# • ако се претпостави да је сваки део пута трајао исто време,
# • ако се претпостави да је на сваком делу пута аутомобил прешао исто растојање.
# Улаз: Са стандардног улаза уноси се n (2 ≤ n ≤ 10) позитивних реалних бројева: v1, v2, …, vn (za svako vi
# важи 30 ≤ vi ≤ 120), након чега следи крај улаза.
# Излаз: У првој линији стандардног излаза исписати реалан број заокружен на 2 децимале који представља
# просечну брзину под претпоставком да је сваки део пута трајао исто време, а у другом реду реалан број
# заокружен на 2 децимале који представља просечну брзину под претпоставком да је на сваком делу пута
# аутомобил прешао исто растојање.
# Пример
# Улаз
# 60
# 40
# Излаз
# 50.00
# 48.00

# brzine=[]
# while len(brzine)<=10:
#     try:
    
#         brzine.append(int(input('brzina ')))
#     except:
#         break

# arit=sum(brzine)/len(brzine)
# harmonija=[1/v for v in brzine]
# harm=len(brzine)/sum(harmonija)
# print(f'{arit:.2f}')
# print(f'{harm:.2f}')
#===================================================================
    
#===================================================================
#Zadatak  18
# Задатак: Просечан раст цена
# Потрошачка корпа је коштала 60000 динара. Након годину дана цене су порасле 21 проценат и потрошачка
# корпа је коштала 72600 динара. Након друге године цене су порасле још 44 процента и потрошачка корпа је
# коштала 104544 динара. Поставља се питање колико је просечно годишње порасла цена потрошачке корпе.
# Дефинишимо да ће просечан проценат пораста цене бити онај који, када се примени након сваке године,
# на крају дати исту цену као и у случају полазних пораста цена. У нашем примеру, ако би цена порасла 32
# процента након годину дана потрошачка корпа би коштала 79200 динара, и ако би након друге године порасла

# још 32 процента, на крају би коштала поново тачно 104544 динара, тако да кажемо да је просечан пораст цене
# 32 процента. Напиши програм који за дате појединачне проценте пораста цене након сваке године израчунава
# просечан проценат пораста цене током целог периода.
# Улаз: Са стандардног улаза се уноси број n (важи 2 ≤ n ≤ 10) а затим n реалних бројева p1, p2, . . . , pn који
# представљају проценте раста цене на крају сваке године (за свако pi важи да је 5 ≤ pi ≤ 50).
# Излаз: На стандардни излаз приказати један реалан број заокружен на две децимале који представља просечан проценат пораста цене.
# Пример 1
# Улаз
# 2
# 21
# 44
# Излаз
# 32.00
# Пример 2
# Улаз
# 5
# 47.0
# 13.0
# 13.5
# 26.5
# 16.5
# Излаз
# 22.68

# import math
# n = int(input()) # broj godina
# # učitavamo procenat rasta za svaku godinu i
# # izračunavamo proizvod koeficijenata rasta
# proizvod = 1.0
# for i in range(n):
#     pi = float(input()) # procenat rasta u tekućoj godini
#     proizvod = proizvod * (1.0 + pi / 100.0)
# # izračunavamo i ispisujemo prosečno poskupljene
# prosecno_poskupljenje = 100.0 * (math.pow(proizvod, 1.0 / n) - 1.0)
# print(format(prosecno_poskupljenje, '.2f'))

#===================================================================


#===================================================================
#Zadatak  19
# Задатак: Производња малина
# Власник имања, Маринко, одлучио је да гаји малине. Направио је план за n година. Прве године планира да
# произведе t тона малина, а сваке следеће да повећа производњу за p%. Написати програм којим се одређује
# колико тона малина Маринко планира да произведе n-те године узгајања малина.
# Улаз: Прва линија стандардног улаза садржи природан број n (n ≤ 10) број планираних година. Друга и
# трећа линија стандардног улаза садрже по један реалан број, који редом представљају колико тона малина
# Маринко планира да произведе прве године t (0 < t < 5) и за колико процената Маринко планира да повећа
# производњу сваке године p (10 ≤ p ≤ 50).
# Излаз: На стандардном излазу приказати, на две децимале, колико тона малина Маринко планира да произведе n-те године узгајања малина.
# Пример
# Улаз
# 5
# 2
# 25
# Излаз
# 4.88

# n=int(input('koliko godina marinsko mastara: '))
# t=int(input('koliko tona ce da ima prve godine '))
# p=int(input('za koliko procenata planira da poveza proizvodnju do te godine '))
# broj=t
# while n>1:
#     broj=broj+broj*(p/100)
#     n-=1
# print(format(broj,'.2f'))
#===================================================================

#===================================================================
#Zadatak  20
# Задатак: Сума низа бројева
# Професор математике је поставио следећи задатак:
# Одредити суму n бројева, ако је први број дати број a, а сваки следећи број добија се тако што претходни
# број помножимо са датим бројем q.
# Ученик који први реши задатак добија петицу. Помозите ученицима, напишите програм којим се за дати
# природан број n, и дате реалне бројеве a и q одређује тражена сума.
# Улаз:
# • Прва линија стандардног улаза садржи природан број n (n ≤ 50).
# • Друга линија стандардног улаза садржи реалан број a (0 < a ≤ 10).
# • Трећа линија стандардног улаза садржи реалан број q (0 < q < 1).
# Излаз: На стандардном излазу приказати, на пет децимала, тражену суму бројева.
# Пример
# Улаз
# 4
# 20.00
# 0.50
# Излаз
# 37.50000
# n=int(input('suma broeva '))
# a=float(input('pocetni broj '))
# q=float(input('korak '))
# suma=0
# broj=a
# while n>0:
#     suma+=broj
#     broj=broj*q
#     n-=1    
# print(f'suma je {suma:.5f}')
#===================================================================


#===================================================================
#Zadatak  21
# Задатак: Једнакост растојања
# Становници једне дугачке улице желе да одреде положај на којем ће бити направљена антена за мобилну
# телефонију. Пошто желе да локацију одреде на најправеднији могући начин, договорили су се да антену
# саграде на месту на ком ће збир растојања свих оних који се налазе лево од антене до ње, бити једнак збиру
# растојања свих оних који се налазе десно од антене до ње. Ако су познате координате свих кућа у улици
# (можемо замислити да су то координате тачака на једној правој), напиши програм који одређује положај
# антенте.
# Улаз: Са стандардног улаза у првој линији се уноси природан број n (1 ≤ n ≤ 100) који представља број
# станара, а у наредних n линија реални бројеви (од −1000 до 1000) који представљају координате станара (x
# координате тачака на оси).
# Излаз: На стандардни излаз исписати један реалан број који представља тражени положај антене (допуштена
# је толеранција грешке 10−5
# ).
# Пример
# Улаз
# 5
# -7.34
# 15.6
# 3.67
# -22.17
# 6.2
# Излаз
# -0.80800

# n = int(input())
# kuce = [float(input()) for _ in range(n)]

# # Inicijalizujemo vrednosti
# najbolje_mesto = None
# najmanja_razlika = float('inf')

# # Probamo svaku moguću tačku od -1000 do 1000 (sa korakom 0.001)
# x = -1000.0
# while x <= 1000.0:
#     levo = sum(abs(k - x) for k in kuce if k < x)
#     desno = sum(abs(k - x) for k in kuce if k > x)
#     razlika = abs(levo - desno)

#     # Ako je ova razlika najmanja do sad, zapamti ovo mesto
#     if razlika < najmanja_razlika:
#         najmanja_razlika = razlika
#         najbolje_mesto = x

#     x += 0.001

# # Ispis rezultata sa 5 decimala
# print(f"{najbolje_mesto:.5f}")

#===================================================================

#===================================================================
#Zadatak  22
# Задатак: Тежиште
# Тежиште T троугла ABC је пресек његових тежишних дужи. Та тачка има и друга занимљива својства. На
# пример, када бисмо изрезали троугао од папира, могли бисмо да га балансирамо на врху оловке, само ако
# бисмо оловку поставили у тежиште троугла. Такође, тежиште је тачка таква да је збир квадрата растојања
# између ње и темена троугла (тј. израз |AT|
# 2+|BT|
# 2+|CT|
# 2
# ) најмањи могућ. Уједно, то је једина тачка таква
# 138
# 4.2. ОСНОВНИ АЛГОРИТМИ НАД СЕРИЈАМА ЕЛЕМЕНАТА
# да је збир вектора −→AT +
# −→BT +
# −→CT =
# −→0 . Користећи последње поменуто својство, појам тежишта се може
# уопштити на произвољан коначан скуп тачака (тада се понекад назива и барицентар или центроид). Напиши
# програм који за n тачака равни задатих својим координатама одређује њихово тежиште.
# Улаз: Са стандардног улаза учитава се број 3 ≤ n ≤ 100 и затим 2n парова реалних бројева (xi
# , yi), при
# чему је сваки број у посебном реду, који представљају координате n тачака равни.
# Излаз: На стандардни излаз исписати координате тежишта тог скупа тачака, прво координату x, затим координату y, сваку у посебном реду, заокружену на пет децимала.
# Пример
# Улаз
# 3
# 0
# 0
# 0
# 1
# 1
# 0
# Излаз
# 0.33333
# 0.33333

# n=int(input('neki dug '))
# xzbir=0
# yzbir=0
# for i in range(n):
#     x=int(input('x koordinata'))
#     y=int(input('y koordinata '))
#     xzbir+=x
#     yzbir+=y 
# print(format(xzbir/n,'.5f'))
# print(format(yzbir/n,'.5f'))
#===================================================================

#===================================================================
#Zadatak  23
# Задатак: Бројеви дељиви са 3
# Напиши програм који међу унетим бројевима одређује и исписује оне који су дељиви са 3.
# Улаз: Са стандардног улаза се најпре учитава природан број n (1 ≤ n ≤ 1000), а потом и n природних
# бројева из интервала [1, 108
# ], сваки у посебном реду.
# Излаз: На стандардни излаз исписати све учитане бројеве који су дељиви са 3 (у истом редоследу у ком су
# учитани). Сваки број исписати у посебној линији.
# Пример
# Улаз
# 5
# 100
# 11
# 12
# 18
# 102
# Излаз
# 12
# 18
# 102

n=int(input('ukupno brojeva '))
brojev=[]
for i in range(n):
    broj=int(input('broj '))
    if broj%3==0:
        brojev.append(broj)
for x in brojev:
    print(x)
    
    
        




#===================================================================


































 